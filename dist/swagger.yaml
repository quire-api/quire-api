swagger: '2.0'
info:
  description: "# Introduction\nWelcome to the reference for the Quire REST API!\n\nThe Quire REST API provides a broad set of operations and resources that:\n\n  * Consistently do repetitive or tedious tasks.\n  * Chain a process together for your team’s process and workflow.\n    * Pull information from other locations such as email and <a href=\"https://evernote.com/\" target=\"_blank\">Evernote</a> into Quire.\n    * Push information from Quire to other locations such as email and <a href=\"https://zapier.com/\" target=\"_blank\">Zapier</a>. \n\nWant to share your thoughts on how Quire API works for you? <a href=\"/feedback\">Tell us how you feel </a>about using our API and what we can do to make it better.\n\n> <a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a> is a web-service protocol for rapid development by using HTTP and JSON technology.\n\n# API Changelog\n\nYou can find the <a href=\"https://github.com/quire-api/quire-api/blob/master/CHANGES.md\" target=\"_blank\">Changelog</a> of the API Reference in the Quire Community.\n\n# Authentication\n\n## OAuth v2.0\n\nQuire uses <a href=\"https://tools.ietf.org/html/rfc6749\">OAuth v2.0</a> to authenticate your app to access the Quire REST API on behalf of users without getting their password.\n\nAuthenticating via OAuth2 requires the following steps:\n\n1. Register Your Application on Quire\n2. Ask a Quire User to Grant Access to Your Application\n3. Retrieve an Access Token\n4. Make Authenticated Requests\n\n### Register Your Application on Quire\n\n![Quire API](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/openAPI.png)\n\n**1. Give your app a cool name**\n\nYour app deserves a cool name that lives up to its wide broad of great features. \n\nAll of the app users will see this name in public, so think carefully!\n\n**2. Choose the Quire Organization that your app belongs to**\n\nYou can choose an organization in Quire that your app belongs to.\n\nIf one day you decide to leave the organization, you will lose the authority to manage the app. \n\n**3. Redirect URL**\n\nWhen users grant your app authorization request, users will be directed to the configured URL that you’ve set. \n\n**4. Choose permission scopes** \n\nYou can set permission on what your app can do with Quire. There are several options for you to choose from. \n\n*Note: If none of the options is selected, the app can only read user’s data.*\n \n**5. Development Client ID and Client Secret**\n\n![Quire Open API](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/client-id-client-secret.png)\n\nThe Client ID and Client secret will be automatically generated as you create an app. \n\nThe Client ID is a unique ID to identify your app.\n\nYou should keep your client secret safe, which means you should never share your client secret with anyone. If you choose to regenerate the client secret, the old one will immediately become invalid. \n\n**6. Update your App**\n\nIf your app hasn't been published to Quire App Directory, it will remain as unpublished status. You can still use the configured shareable link in the Developer App Console Distribution to share the app with other users for testing or integration. \n\nWhen you make changes to the app, you can use the shareable link to access the development copy as well. Working on your development copy will not affect your live App Directory app. When your updated app is ready to be published and replaced the old version on Quire App Directory, your published app will have a different Client ID to the unpublished one.\n\nThere are two sets of Client ID and Client Secret. \n\n * `Development set` - should be used during developing and testing internally of the app. \n * `Production set` - should be used once your app is ready and published on Quire App Directory.\n\n## Fulfill Authorization Request\n\n### Ask a Quire User to Grant Access to Your Application\n\nOnce registering your application, you can ask your user to grant access to your application.\n\nThe authorization endpoint lets users grant your app access to the requested permissions. \n\nThe authorization endpoint should look like this:\n\n`https://quire.io/oauth?client_id=your-client-ID&redirect_uri=your-redirect-uri`\n\n![Quire Grant Access](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/Quire-API-Authorization.png)\n\nAfter your user clicks `Allow`, the access will be granted, and he will be redirected to the URL you specified in the `redirect_uri` parameter with an authorization code provided as a query parameter called `code`.\n\nAfter your app is granted, you can have an authorization code to exchange access token for access Quire API. The `redirect_uri` is optional. If not being specified, we will automatically use the one that is previously detected in the app. If specified, the redirect URL must start with the prefix of the one that was previously detected in the app.\n\n| Parameter | Value |\n| --- | --- |\n| client\\_id | {your-client-ID} |\n| redirect\\_uri | Optional. The redirect URL after granted. If specified, it must match the redirect URL specified in your app's config. Otherwise, the configured URL will be used. |\n| state | Optional. A random string generated by your app to protect from XSRF. |\n\n### Retrieve Access Token\n\nTo retrieve the access token, you have to post a request to `https://quire.io/oauth/token` with the following data:\n\n| Parameter | Value |\n| --- | --- |\n| grant\\_type | authorization\\_code |\n| code | {your-authorization-code} |\n| client\\_id | {your-client-ID} |\n| client\\_secret | {your-client-secret} |\n\n```bash\ncurl -X POST \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=authorization_code&code=Your_code_from_previous_step&client_id=Your_app_client_id&client_secret=Your_app_client_secret\" \\\n  https://quire.io/oauth/token\n```\n\nThen, the access token will be returned in the response's body.\n\n```json\n{\n  \"access_token\":\"ACCESS_TOKEN\",\n  \"token_type\": \"bearer\",\n  \"expires_in\":2592000,\n  \"refresh_token\":\"REFRESH_TOKEN\"\n}\n```\nThe token should be kept carefully and permanently since you need it to access every Quire API.\n\n### Use Access Token to Access Quire API\n\nIn each request, the access token must be put in the header. The header name is `Authorization` and the value is `Bearer your_token`.\n\nAfter you exchange the access token, your app can make requests to Quire API on behalf of the authorized users.\n\n```bash\ncurl -H 'Authorization: Bearer {access_token}' \\\nhttps://quire.io/api/user/id/me\n```\n```json\n{\n  \"email\": \"john@gmail.cc\",\n  \"website\": \"https://coolwebsites.com\",\n  \"id\": \"My_ID\",\n  \"description\": \"This is *cool*!\",\n  \"url\": \"https://quire.io/u/My_ID\",\n  \"nameText\": \"My Name\",\n  \"nameHtml\": \"My Name\",\n  \"descriptionText\": \"This is cool!\",\n  \"descriptionHtml\": \"This is <i>cool</i>!\",\n  \"image\": \"https://quire.s3.amazonaws.com/oid/image.jpg\",\n  \"iconColor\": \"37\",\n  \"name\": \"My Name\",\n  \"oid\": \"Dyh2YkFcu9uLgLFIeN1kB4Ld\"\n}\n```\n### Token Expiration\n\nA refresh token might stop working for one of these reasons:\n\n* The user has revoked your app's access.\n* The refresh token has not been used for 6 months.\n\n# Publish App\n\n![Quire Publish App](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/Quire-API-Publish-App.png)\n\nBy default, your app will be set as Private. You can change the app distribution to Public so that other Quire users can install your app to their workspace as well.\n\nIf your app is made available on Quire App Directory and you want to delete the app, you should communicate with your users first before depreciating the app.\n\n# WebHook\n\nWhen one event on Quire is triggered, the system will send a payload to the webhook's configured URL.\n\n> A webhook is used by Quire to call an app, while Quire API is used by an app to call Quire.\n> To receive these events, you have to specify a valid URL for Webhooks when configuring your app.\n\n## System Events\n\nA system event is used to notify your app about system or app's activities.\n\n### Token Expiration\n\nWhen the token has been expired or revoked, an event will be sent to your app. You can clean up your storage if necessary.\n\n```\n{\n  \"type\": \"system\",\n  \"token\": \"hook-token-defined-by-you\",\n  \"secret\": \"secret-defined-by-you\",\n  \"data\": {\n    \"type\": \"token-revocation\",\n    \"token\": \"the-refresh-token\"\n  }\n}\n```\n\n### Host Revocation\n\nWhen the user revokes the grant to a host (either a project or an organization), an event will be sent to your app. You can clean up your storage if necessary.\n\n```\n{\n  \"type\": \"system\",\n  \"token\": \"hook-token-defined-by-you\",\n  \"secret\": \"secret-defined-by-you\",\n  \"data\": {\n    \"type\": \"host-revocation\",\n    \"token\": \"the-refresh-token\",\n    \"host\": \"host-oid\",\n    \"otype\": \"host-type\",\n  }\n}\n```\n\n## Notification Events\n\nA notification is the information about a update (aka., an activity). Here is an example:\n\n```\n{\n  \"type\": \"notification\",\n  \"token\": \"hook-token-defined-by-you\",\n  \"secret\": \"secret-defined-by-you\",\n  \"data\": {\n    \"type\": 0, //activity's type\n    \"when\": \"2019-09-30T08:20:12.000Z\",\n    \"what\": {\n      \"oid\": \"YxjapXXRCOYxoaiCT4tT3OQm\", //OID of a task, project, or organization depending on type\n      \"id\": 101,\n      \"name\": \"Brand new start\"\n    },\n    \"user\": {\n      \"oid\": \"1AbDEFed2A5031BEDDweqmde\", //OID of the user\n      \"id\": \"john.doer\",\n      \"name\": \"John Doer\"\n    },\n    \"message\": \"<a href=\\\"https://quire.io/u/john.doer\\\">John Doer</a> added <a href=\\\"https://quire.io/w/MyProjects/101\\\">Brand new start</a>\",\n    \"text\": \"John Doer added Brand new start\",\n    \"url\": \"https://quire.io/w/MyProjects/101\"\n  } \n}\n```\n\n* There is an optional field called `value` in the map of the `data` field. It contains the detailed information in a map instance. For example, it contains the assignee's ID, name and URL if it is an assignment.\n\n* Also, if the notification is about *start* or *due*, there will be another field called `due` in the map of the `data` field. It is the date time formatted in user's locale and time zone.\n\n* There is an addition field called `tasks` for activities that can affect multiple tasks. The field is a collection of OIDs of tasks that were changed.\n    - For example, completing a task will complete its subtasks too. And, you can find all of them from the `tasks` field.\n    - Please refer to [Activity Types](https://github.com/quire-api/quire-api/blob/master/docs/activity_types.md).\n\n## Registration for Notifications\n\nIf the app wants to receive notifications of a specific projects or tasks, it can *follow* the projects or apps by sending a `PUT` request to the URL. To add a follower, the body of the request can be:\n\n**Syntax 1**\n\n```\n{\n  \"addFollowers\": [\"app\"]\n}\n```\n\nwhere `app` is a keyword. It indicates that the app would like to receives the notifications about the given target (a project or a task). That is, it'll add the app into the target's followers.\n\n**Syntax 2**\n\nIn additions, you can specify additional information that will be passed as part of a notification in the following syntax.\n\n```\n\"app|team|channel\"\n```\n\nwhere `app` is a keyword while `team` and `channel` are application specific. That is, you can pass any value to `team` and `channel`.\n\n> Note: `team` and `channel` can not contain `'|'`.\n\nFor example,\n\n```\n{\n  \"addFollowers\": [\"app|extra101\"]\n}\n```\n\nThen, the notification will carry additional field called `team` with the value `\"extra101\"`:\n\n```\n{\n  \"type\": \"notification\",\n  \"team\": \"extra101\",\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\nAnother example:\n\n```\n{\n  \"addFollowers\": [\"app|extra101|channel9\"]\n}\n```\n\nYou'll get:\n\n```\n{\n  \"type\": \"notification\",\n  \"team\": \"extra101\",\n  \"channel\": \"channel9\",\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\n**Syntax 3**\n\n```\n\"app|team|channel|mine\"\n```\n\nwhere both `app` and `mine` are keywords. It is similar to *Syntax 2*, except it receives only notifications that match the notification setting of the user.\n\nIf you don't need both `team` and `channel`, you can specify: `\"app|||mine`.\n\n> The notification setting can be found at `https://quire.io/w/YourProject?view=setting&tab=options#notifications`\n\n**Syntax 4**\n\n```\n\"app|/path\"\n```\n\nwhere `app` is a keyword, and `/path` is application specific. The path will be appended to the app's hook URL. For example, assume the app's hook URL is `\"https://super.app/hooks/standard\"`, and the follower \"app|/soc/id279/channel51\". Then, the notification will be posted the following URL: `\"https://super.app/hooks/standard/soc/id279/channel51\"`.\n\n**Syntax 5**\n\nIf you'd like to pass additional information in this syntax, you can append it as follows.\n\n```\n\"app|/path|channel\"\n```\n\nFor example, `app|/soc/id8|box51`. Then, `box51` will be part of the JON object sent to the hook URL.\n\n```\n{\n  \"type\": \"notification\"\n  \"channel\": \"box51\"\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\n## Responding and Retries\n\nWhen receiving the notification, your Web Hook shall return a status code between 200 and 299 to indicate success.\n\nIf 403 or 404 is returned, the registration will be removed, so called *unfollow*. That is, you won't receive further notifications for the same task or project your app *follows*.\n\nIf a status code other than above is returned, we will retry 10 minutes later, then 1 hour later, 1 day later and 3 days later.\n\n## Activities Types\n\n* [Activity Types](https://github.com/quire-api/quire-api/blob/master/docs/activity_types.md)\n\n\n# Rate Limits\n\nTo protect the stability of the API and keep it available to all users, Quire enforces multiple kinds of rate limiting. \nRequests that hit any of our rate limits will receive a `429 Too Many Requests` response.\nWe may change these quotas or add new quotas in the future.\n\nHere are the limits for free plans.\n\n| Plan | Maximum requests per organization, per *minute* | Maximum requests per organization, per *hour*\n|---------|------|-------\n| Free | 25  | 120\n\n> Note: the limit is per-organization. It sums up the total number of all accesses from all applications for each organization.\n> For more quota, please refer to [Pricing](/pricing).\n\n## Size limits\n\nThe size of each request can't be larger than 1MB. Requests that hit this limit will receive a `413 Content too large` response.\n\n# Status Codes\n\n| Code | Meaning                | Description\n|------|------------------------|--------------------------------\n| 200  | Success                | Request successful\n| 400  | Bad Request            | You're using a wrong parameter, or passing incorrect data.\n| 401  | Unauthorized           | Invalid or expired token.\n| 403  | Forbidden              | Not authorized to access the resource.\n| 404  | Not Found              | The specified resource could not be found.\n| 405  | Method not allowed     | Method not allowed or supported.\n| 409  | Conflict               | There is already a resource with the same criteria.\n| 413  | Content too large      | The request's content is larger than 1MB.\n| 418  | Not valid JSON content | The request's content doesn't appear to be JSON.\n| 429  | Too Many Requests      | Exceeded the [rate limit](#rate-limits) for API calls\n| 500  | Internal Server Error  | There is an unexpected error.\n| 503  | Service Unavailable    | Server is down for maintenance.\n\n## Error Responses\n\nThe following JSON data is returned in the response body when an error occurs.\n\n```json\n{\n\t\"code\": a_number,\n  \"message\": \"an error message here\"\n}\n```\n\n| Error Code | Meaning\n|-----|-----------------------\n| 100 | General authentication error.\n| 400 | Bad request including wrong request body, wrong parameter and so on.\n| 401 | Invalid or expired token.\n| 403 | Forbidden.\n| 404 | Resource not found.\n| 405 | Method not allowed.\n| 413 | Request too large.\n| 429 | Too many invocations.\n| 469 | Quota exceeded, such as number of projects and number of members.\n| 500 | General invocation error. Most likely, an internal error.\n"
  version: 1.0.0
  title: Quire API
  termsOfService: https://quire.io/terms
  contact:
    name: Quire
    url: https://quire.io
    email: info@quire.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  x-logo:
    url: https://quire.io/s/img/quire_logo.svg
host: quire.io
basePath: /api
tags:
  - name: chat
    description: Chat channels.
  - name: comment
    description: A comment that a user can add to a chat channel or a task.
  - name: doc
    description: Documents.
  - name: notification
    description: Send a notification to the user who authorized this app. Typically used to surface errors or important alerts.
  - name: organization
    description: An organization is a group of projects where members collaborate.
  - name: partner
    description: An external team (aka a partner) is a group of users who can access only the tasks assigned to that team.
  - name: project
    description: A project represents a prioritized list of tasks in Quire. It belongs to a single organization and is accessible to a subset of users in that organization, depending on its permissions.
  - name: status
    description: Task statuses represent progress values for tasks.
  - name: storage
    description: |-
      A simple key–value storage for application-specific data.
      Data is scoped to the current access token and will be deleted when the token is revoked or expires.
  - name: sublist
    description: A sublist is a collection of tasks, representing a subset of tasks from a larger scope.
  - name: tag
    description: A tag is a label that can be attached to a task in Quire.
  - name: task
    description: Tasks are the basic units of work you and your team collaborate on.
  - name: user
    description: Represents a Quire account that can access organizations, projects, and tasks.
schemes:
  - https
paths:
  /chat/id/{ownerType}/{ownerId}:
    post:
      tags:
        - chat
      summary: Create a chat channel by owner ID.
      description: Adds a new chat channel to the specified owner by ID (currently only `project`).
      operationId: createChatById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - in: body
          name: body
          description: Chat channel to create.
          required: true
          schema:
            $ref: '#/definitions/CreateChatBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Chat'
  /chat/id/{ownerType}/{ownerId}/{id}:
    get:
      tags:
        - chat
      summary: Get a chat channel by ID.
      description: Returns the full chat channel record for the given owner and channel ID.
      operationId: getChatById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - name: id
          in: path
          description: Chat channel ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Chat'
    put:
      tags:
        - chat
      summary: Update a chat channel by ID.
      description: Updates an existing chat channel and returns the updated record.
      operationId: updateChatById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - name: id
          in: path
          description: Chat channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateChatBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Chat'
    delete:
      tags:
        - chat
      summary: Delete a chat channel by ID.
      description: Deletes the specified chat channel.
      operationId: deleteChatById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - name: id
          in: path
          description: Chat channel ID.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /chat/list/id/{ownerType}/{ownerId}:
    get:
      tags:
        - chat
      summary: List chat channels by owner ID.
      description: Returns all chat channel records for the given owner.
      operationId: getChatsByOwnerId
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/list/id/foo` is equivalent to `/list/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Chat'
  /chat/list/{ownerType}/{ownerOid}:
    get:
      tags:
        - chat
      summary: List chat channels by owner OID.
      description: Returns all chat channel records for the given owner.
      operationId: getChatsByOwnerOid
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/list/abc123` is equivalent to `/list/project/abc123`.
          required: true
          type: string
        - name: ownerOid
          in: path
          description: Owner OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Chat'
  /chat/{oid}:
    get:
      tags:
        - chat
      summary: Get a chat channel by OID.
      description: Returns the full chat channel record.
      operationId: getChat
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Chat channel OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Chat'
    put:
      tags:
        - chat
      summary: Update a chat channel by OID.
      description: Updates an existing chat channel and returns the updated record.
      operationId: updateChatByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Chat channel OID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateChatBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Chat'
    delete:
      tags:
        - chat
      summary: Delete a chat channel by OID.
      description: Deletes the specified chat channel.
      operationId: deleteChatByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Chat channel OID.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /chat/{ownerType}/{ownerOid}:
    post:
      tags:
        - chat
      summary: Create a chat channel by owner OID.
      description: Adds a new chat channel to the specified owner (currently only `project`).
      operationId: createChat
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. Currently only `project` is supported. If omitted, `project` is assumed; e.g., `/abc123` is equivalent to `/project/abc123`.
          required: true
          type: string
        - name: ownerOid
          in: path
          description: Owner OID.
          required: true
          type: string
        - in: body
          name: body
          description: Chat channel to create.
          required: true
          schema:
            $ref: '#/definitions/CreateChatBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Chat'
  /comment/attach/{commentOid}/{filename}:
    post:
      tags:
        - comment
      summary: Upload an attachment to a comment (by comment OID).
      description: Uploads an attachment to an existing comment.
      operationId: attachToCommentByOid
      produces:
        - application/json
      parameters:
        - name: commentOid
          in: path
          description: Comment OID.
          required: true
          type: string
        - name: filename
          in: path
          description: |-
            Attachment file name, e.g., `readme.txt`.

            Provide a meaningful extension so the browser can recognize the MIME type (e.g., `revenue.pdf`, `contacts.json`).

            Alternatively, set the MIME type via the `Content-Type` header.
          required: true
          type: string
        - in: body
          name: body
          description: Attachment content (raw bytes). For images, the request body is the image itself.
          required: true
          schema:
            type: object
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SimpleAttachment'
  /comment/chat/{chatOid}:
    post:
      tags:
        - comment
      summary: Add a new comment to a chat channel (by chat OID).
      description: Adds a new comment to the specified chat channel.
      operationId: createCommentToChatByOid
      produces:
        - application/json
      parameters:
        - name: chatOid
          in: path
          description: OID of the chat channel.
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create.
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  /comment/id/{projectId}/chat/{chatId}:
    post:
      tags:
        - comment
      summary: Add a new comment to a chat channel (by project ID and chat ID).
      description: Adds a new comment to the specified chat channel.
      operationId: createCommentToChatById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: chatId
          in: path
          description: Chat channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create.
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  /comment/id/{projectId}/task/{taskId}:
    post:
      tags:
        - comment
      summary: Add a new comment to a task (by project ID and task ID).
      description: Adds a new comment to the specified task.
      operationId: createCommentToTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: taskId
          in: path
          description: Task ID.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Comment to create.
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  /comment/list/chat/{chatOid}:
    get:
      tags:
        - comment
      summary: Get all comments of a chat channel (by chat OID).
      description: Returns all comments of the specified chat channel.
      operationId: getCommentsOfChatByOid
      produces:
        - application/json
      parameters:
        - name: chatOid
          in: path
          description: OID of the chat channel.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  /comment/list/id/{projectId}/chat/{chatId}:
    get:
      tags:
        - comment
      summary: Get all comments of a chat channel (by project ID and chat ID).
      description: Returns all comments of the specified chat channel.
      operationId: getCommentsOfChatById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: chatId
          in: path
          description: Chat channel ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  /comment/list/id/{projectId}/task/{taskId}:
    get:
      tags:
        - comment
      summary: Get all comments of a task (by project ID and task ID).
      description: Returns all comments of the specified task.
      operationId: getCommentsOfTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: taskId
          in: path
          description: Task ID.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  /comment/list/task/{taskOid}:
    get:
      tags:
        - comment
      summary: Get all comments of a task (by task OID).
      description: Returns all comments of the specified task.
      operationId: getCommentsOfTaskByOid
      produces:
        - application/json
      parameters:
        - name: taskOid
          in: path
          description: OID of the task.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  /comment/task/{taskOid}:
    post:
      tags:
        - comment
      summary: Add a new comment to a task (by task OID).
      description: Adds a new comment to the specified task.
      operationId: createCommentToTaskByOid
      produces:
        - application/json
      parameters:
        - name: taskOid
          in: path
          description: OID of the task.
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create.
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  /comment/{commentOid}:
    put:
      tags:
        - comment
      summary: Update an existing comment (by comment OID).
      description: Updates an existing comment and returns the updated record.
      operationId: updateCommentByOid
      produces:
        - application/json
      parameters:
        - name: commentOid
          in: path
          description: Comment OID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    delete:
      tags:
        - comment
      summary: Delete an existing comment (by comment OID).
      description: Deletes an existing comment.
      operationId: deleteCommentByOid
      produces:
        - application/json
      parameters:
        - name: commentOid
          in: path
          description: Comment OID.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /doc/id/{ownerType}/{ownerId}:
    post:
      tags:
        - doc
      summary: Create a document by owner ID.
      description: Adds a new document to the specified owner by ID (`project`, `organization`, `folder`, or `smart-folder`).
      operationId: createDocById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - in: body
          name: body
          description: Document to create.
          required: true
          schema:
            $ref: '#/definitions/CreateDocBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Doc'
  /doc/id/{ownerType}/{ownerId}/{id}:
    get:
      tags:
        - doc
      summary: Get a document by ID.
      description: Returns the full document record for the given owner and document ID.
      operationId: getDocById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - name: id
          in: path
          description: Document ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Doc'
    put:
      tags:
        - doc
      summary: Update a document by ID.
      description: Updates an existing document and returns the updated record.
      operationId: updateDocById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - name: id
          in: path
          description: Document ID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateDocBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Doc'
    delete:
      tags:
        - doc
      summary: Delete a document by ID.
      description: Deletes the specified document.
      operationId: deleteDocById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
        - name: id
          in: path
          description: Document ID.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /doc/list/id/{ownerType}/{ownerId}:
    get:
      tags:
        - doc
      summary: List documents by owner ID.
      description: Returns all documents for the specified owner.
      operationId: getDocsByOwnerId
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/list/id/foo` is equivalent to `/list/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: Owner ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Doc'
  /doc/list/{ownerType}/{ownerOid}:
    get:
      tags:
        - doc
      summary: List documents by owner OID.
      description: Returns all documents for the specified owner.
      operationId: getDocsByOwnerOid
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/list/abc123` is equivalent to `/list/project/abc123`.
          required: true
          type: string
        - name: ownerOid
          in: path
          description: Owner OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Doc'
  /doc/{oid}:
    get:
      tags:
        - doc
      summary: Get a document by OID.
      description: Returns the full document record.
      operationId: getDoc
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Document OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Doc'
    put:
      tags:
        - doc
      summary: Update a document by OID.
      description: Updates an existing document and returns the updated record.
      operationId: updateDocByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Document OID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateDocBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Doc'
    delete:
      tags:
        - doc
      summary: Delete a document by OID.
      description: Deletes the specified document.
      operationId: deleteDocByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Document OID.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /doc/{ownerType}/{ownerOid}:
    post:
      tags:
        - doc
      summary: Create a document by owner OID.
      description: Adds a new document to the specified owner (`project`, `organization`, `folder`, or `smart-folder`).
      operationId: createDoc
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: Owner type. One of `project`, `organization`, `folder`, or `smart-folder`. If omitted, `project` is assumed; e.g., `/abc123` is equivalent to `/project/abc123`.
          required: true
          type: string
        - name: ownerOid
          in: path
          description: Owner OID.
          required: true
          type: string
        - in: body
          name: body
          description: Document to create.
          required: true
          schema:
            $ref: '#/definitions/CreateDocBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Doc'
  /notification:
    post:
      tags:
        - notification
      summary: Send a notification.
      description: Sends a notification to the current authorized user.
      operationId: createNotification
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification payload.
          required: true
          schema:
            $ref: '#/definitions/CreateNotificationBody'
      responses:
        '200':
          description: ok
  /organization/id/{id}:
    get:
      tags:
        - organization
      summary: Get an organization by ID.
      description: Returns the complete organization record for the given ID.
      operationId: getOrganizationById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Organization ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OrganizationWithPlan'
    put:
      tags:
        - organization
      summary: Update an organization by ID.
      description: Updates an existing organization and returns the complete updated record.
      operationId: updateOrganizationById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Organization ID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  /organization/list:
    get:
      tags:
        - organization
      summary: Get all organizations.
      description: Returns organization records that the current user can authorize for this application, or already has authorized.
      operationId: getOrganizations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
  /organization/{oid}:
    get:
      tags:
        - organization
      summary: Get an organization by OID.
      description: Returns the complete organization record for the given OID.
      operationId: getOrganizationByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Organization OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OrganizationWithPlan'
    put:
      tags:
        - organization
      summary: Update an organization by OID.
      description: Updates an existing organization and returns the complete updated record.
      operationId: updateOrganizationByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Organization OID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateOrganizationBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  /partner/list/id/{projectId}:
    get:
      tags:
        - partner
      summary: List external teams by project ID.
      description: Returns all external teams in the specified project (by project ID).
      operationId: getPartnersByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Partner'
  /partner/list/{projectOid}:
    get:
      tags:
        - partner
      summary: List external teams by project OID.
      description: Returns all external teams in the specified project (by project OID).
      operationId: getPartnersByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Partner'
  /partner/{oid}:
    get:
      tags:
        - partner
      summary: Get an external team by OID.
      description: Returns the full external team record for the given OID.
      operationId: getPartnerByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: External team OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Partner'
  /project/export-csv/id/{id}:
    get:
      tags:
        - project
      summary: Export a project to CSV by ID.
      description: |-
        Returns a CSV string containing the project, tasks, and related data.
        Available on the Professional plan and above.
        Note: The number of allowed invocations may be more restricted.
      operationId: getProjectCsvById
      produces:
        - text/csv
      parameters:
        - name: id
          in: path
          description: Project ID.
          required: true
          type: string
        - name: status
          in: query
          description: |-
            Task status filter.
            Use `active` for active tasks, `completed` for completed tasks, or `all` for all tasks.
            Default: `all`.
          required: false
          type: string
          x-example: status=active
        - name: merge
          in: query
          description: |-
            Whether to merge multiple values of the same header into one column (e.g., all tags in a single column).
            Default: `false`.
          required: false
          type: boolean
          x-example: merge=true
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          examples:
            text/csv: |
              "ID",Name,Status,Started,Completed,Priority,Start,Due,Assignee,Tag,Created,Created by,Description
              #6,Task A,In Progress,"Mar 8, 2022",,Medium,,"Mar 8, 2022",,,"Mar 7, 2022",John,
              "#6, #8",Task A1,To-Do,"Jan 24, 2022",,Urgent,,,,,"Mar 7, 2022",John,
              #7,Task B,In Progress,"Jan 24, 2022",,Urgent,,"Mar 4, 2022",,,"Mar 7, 2022",John,
              "#7, #9",Task B1,In Progress,"Jan 24, 2022",,Medium,,,,,"Mar 7, 2022",John,
              "#7, #4",Task B2,In Progress,"Mar 2, 2022",,Medium,,"Mar 8, 2022",,,"Mar 2, 2022",John,
  /project/export-csv/{oid}:
    get:
      tags:
        - project
      summary: Export a project to CSV by OID.
      description: |-
        Returns a CSV string containing the project, tasks, and related data.
        Available on the Professional plan and above.
        Note: The number of allowed invocations may be more restricted.
      operationId: getProjectCsvByOid
      produces:
        - text/csv
      parameters:
        - name: oid
          in: path
          description: Project OID.
          required: true
          type: string
        - name: status
          in: query
          description: |-
            Task status filter.
            Use `active` for active tasks, `completed` for completed tasks, or `all` for all tasks.
            Default: `all`.
          required: false
          type: string
          x-example: status=active
        - name: merge
          in: query
          description: |-
            Whether to merge multiple values of the same header into one column (e.g., all tags in a single column).
            Default: `false`.
          required: false
          type: boolean
          x-example: merge=true
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          examples:
            text/csv: |
              "ID",Name,Status,Started,Completed,Priority,Start,Due,Assignee,Tag,Created,Created by,Description
              #6,Task A,In Progress,"Mar 8, 2022",,Medium,,"Mar 8, 2022",,,"Mar 7, 2022",John,
              "#6, #8",Task A1,To-Do,"Jan 24, 2022",,Urgent,,,,,"Mar 7, 2022",John,
              #7,Task B,In Progress,"Jan 24, 2022",,Urgent,,"Mar 4, 2022",,,"Mar 7, 2022",John,
              "#7, #9",Task B1,In Progress,"Jan 24, 2022",,Medium,,,,,"Mar 7, 2022",John,
              "#7, #4",Task B2,In Progress,"Mar 2, 2022",,Medium,,"Mar 8, 2022",,,"Mar 2, 2022",John,
  /project/export-json/id/{id}:
    get:
      tags:
        - project
      summary: Export a project to JSON by ID.
      description: |-
        Returns a JSON map containing the project, all tasks, and related data.
        Available on the Professional plan and above.
        Note: The number of allowed invocations may be more restricted.
      operationId: getProjectJsonById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Project ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProjectJsonMap'
  /project/export-json/{oid}:
    get:
      tags:
        - project
      summary: Export a project to JSON by OID.
      description: |-
        Returns a JSON map containing the project, all tasks, and related data.
        Available on the Professional plan and above.
        Note: The number of allowed invocations may be more restricted.
      operationId: getProjectJsonByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Project OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProjectJsonMap'
  /project/id/{id}:
    get:
      tags:
        - project
      summary: Get a project by ID.
      description: Returns the complete project record for the given ID.
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Project ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProjectWithPlan'
    put:
      tags:
        - project
      summary: Update a project by ID.
      description: Updates an existing project and returns the complete updated record.
      operationId: updateProjectById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Project ID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  /project/list:
    get:
      tags:
        - project
      summary: Get all authorized projects.
      description: Returns projects that the current user has authorized for this application.
      operationId: getProjects
      produces:
        - application/json
      parameters:
        - name: archived
          in: query
          description: |-
            Whether to include archived projects.
            By default, archived projects are excluded.
            If the parameter is present without a value, `true` is assumed.
          required: false
          type: boolean
          x-example: archived=true
        - name: add-task
          in: query
          description: |-
            Whether to return only projects to which you can add tasks. Default: `false`.
            If the parameter is present without a value, `true` is assumed.
          required: false
          type: boolean
          x-example: add-task=true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  /project/list/id/{organizationId}:
    get:
      tags:
        - project
      summary: Get authorized projects by organization ID.
      description: Returns projects in the specified organization (by ID) that the current user has authorized.
      operationId: getProjectsByOrganizationId
      produces:
        - application/json
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          type: string
        - name: archived
          in: query
          description: |-
            Whether to include archived projects.
            By default, archived projects are excluded.
            If the parameter is present without a value, `true` is assumed.
          required: false
          type: boolean
          x-example: archived=true
        - name: add-task
          in: query
          description: |-
            Whether to return only projects to which you can add tasks. Default: `false`.
            If the parameter is present without a value, `true` is assumed.
          required: false
          type: boolean
          x-example: add-task=true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  /project/list/{organizationOid}:
    get:
      tags:
        - project
      summary: Get authorized projects by organization OID.
      description: Returns projects in the specified organization (by OID) that the current user has authorized.
      operationId: getProjectsByOrganizationOid
      produces:
        - application/json
      parameters:
        - name: organizationOid
          in: path
          description: Organization OID.
          required: true
          type: string
        - name: archived
          in: query
          description: |-
            Whether to include archived projects.
            By default, archived projects are excluded.
            If the parameter is present without a value, `true` is assumed.
          required: false
          type: boolean
          x-example: archived=true
        - name: add-task
          in: query
          description: |-
            Whether to return only projects to which you can add tasks. Default: `false`.
            If the parameter is present without a value, `true` is assumed.
          required: false
          type: boolean
          x-example: add-task=true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  /project/{oid}:
    get:
      tags:
        - project
      summary: Get a project by OID.
      description: Returns the complete project record for the given OID.
      operationId: getProjectByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Project OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProjectWithPlan'
    put:
      tags:
        - project
      summary: Update a project by OID.
      description: Updates an existing project and returns the complete updated record.
      operationId: updateProjectByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Project OID.
          required: true
          type: string
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  /status/id/{projectId}:
    post:
      tags:
        - status
      summary: Add a new task status (by project ID).
      description: Creates a new task status in the specified project.
      operationId: createStatusToProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID to add the status to.
          required: true
          type: string
        - in: body
          name: body
          description: Status to create.
          required: true
          schema:
            $ref: '#/definitions/CreateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
  /status/id/{projectId}/{value}:
    get:
      tags:
        - status
      summary: Get a task status by value (project ID).
      description: Returns the status record matching the given value in the specified project.
      operationId: getStatusByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: value
          in: path
          description: Status value to fetch.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    put:
      tags:
        - status
      summary: Update a task status (by project ID).
      description: Updates an existing status and returns the complete updated record.
      operationId: updateStatusByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: value
          in: path
          description: Status value to update.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    delete:
      tags:
        - status
      summary: Delete a task status (by project ID).
      description: Deletes the specified status.
      operationId: deleteStatusByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
        - name: value
          in: path
          description: Status value to delete.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: ok
  /status/list/id/{projectId}:
    get:
      tags:
        - status
      summary: List all statuses (by project ID).
      description: Returns all status records in the specified project.
      operationId: getStatusesByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
  /status/list/{projectOid}:
    get:
      tags:
        - status
      summary: List all statuses (by project OID).
      description: Returns all status records in the specified project.
      operationId: getStatusesByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
  /status/{projectOid}:
    post:
      tags:
        - status
      summary: Add a new task status (by project OID).
      description: Creates a new task status in the specified project.
      operationId: createStatus
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID to add the status to.
          required: true
          type: string
        - in: body
          name: body
          description: Status to create.
          required: true
          schema:
            $ref: '#/definitions/CreateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
  /status/{projectOid}/{value}:
    get:
      tags:
        - status
      summary: Get a task status by value (project OID).
      description: Returns the status record matching the given value in the specified project.
      operationId: getStatusByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID.
          required: true
          type: string
        - name: value
          in: path
          description: Status value to fetch.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    put:
      tags:
        - status
      summary: Update a task status (by project OID).
      description: Updates an existing status and returns the complete updated record.
      operationId: updateStatusByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID.
          required: true
          type: string
        - name: value
          in: path
          description: Status value to update.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Fields to update.
          required: true
          schema:
            $ref: '#/definitions/UpdateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    delete:
      tags:
        - status
      summary: Delete a task status (by project OID).
      description: Deletes the specified status.
      operationId: deleteStatusByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID.
          required: true
          type: string
        - name: value
          in: path
          description: Status value to delete.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: ok
  /storage/list/{prefix}:
    get:
      tags:
        - storage
      summary: List stored entries by prefix.
      description: |-
        Returns up to 20 entries whose keys start with the given prefix.
        Use this to page or group application-specific values by a common key prefix.
      operationId: getValues
      produces:
        - application/json
      parameters:
        - name: prefix
          in: path
          description: 'Key prefix to match. Example: "foo".'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/StorageList'
  /storage/{name}:
    get:
      tags:
        - storage
      summary: Get a stored value.
      description: |-
        Returns the application-specific value stored under the given name.
        If the key is not found, a 404 status is returned.
        Note: values are scoped per access token.
      operationId: getValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: 'The key name. Example: "latest".'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/StorageMap'
    put:
      tags:
        - storage
      summary: Create or update a stored value.
      description: |-
        Creates or replaces the value stored under the given name.
        If `null` is provided as the value, the key will be deleted.
        Returns `{ "success": true }` when the operation succeeds.
        Note: values are scoped per access token.
      operationId: updateValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: 'The key name. Example: "latest".'
          required: true
          type: string
        - in: body
          name: body
          description: The value to store. Any JSON-serializable object is accepted.
          required: false
          schema:
            $ref: '#/definitions/StorageMap'
      responses:
        '200':
          description: ok
    delete:
      tags:
        - storage
      summary: Delete a stored value.
      description: |-
        Deletes the value stored under the given name.
        Returns `{ "success": true }` if the key existed and was deleted,
        or `{ "success": false }` if the key did not exist.
        Note: values are scoped per access token.
      operationId: deleteValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: 'The key name. Example: "latest".'
          required: true
          type: string
      responses:
        '200':
          description: ok
  /sublist/id/{ownerType}/{ownerId}:
    post:
      tags:
        - sublist
      summary: Create a sublist by owner ID
      description: Creates a new sublist under the specified owner (by ID).
      operationId: createSublistToProject
      produces:
        - application/json
      parameters:
        - name: owenerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/id/foo` is equivalent to `/id/project/foo`.
          required: false
          type: string
        - name: ownerId
          in: path
          description: ID of the owner the new sublist will belong to.
          required: true
          type: string
        - in: body
          name: body
          description: Sublist to create
          required: true
          schema:
            $ref: '#/definitions/CreateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
  /sublist/id/{ownerType}/{ownerId}/{id}:
    get:
      tags:
        - sublist
      summary: Get a sublist by ID
      description: Returns the complete sublist record for the given ID.
      operationId: getSublistById
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: ID of the owner the sublist belongs to.
          required: true
          type: string
        - name: id
          in: path
          description: ID of the sublist.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    put:
      tags:
        - sublist
      summary: Update a sublist by ID
      description: Updates an existing sublist and returns the complete updated record.
      operationId: updateSublist
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: ID of the owner.
          required: true
          type: string
        - in: body
          name: body
          description: Sublist updates
          required: true
          schema:
            $ref: '#/definitions/UpdateSublistBody'
        - name: id
          in: path
          description: ID of the sublist to update.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    delete:
      tags:
        - sublist
      summary: Delete a sublist by ID
      description: Deletes the sublist with the given ID.
      operationId: deleteSublist
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/id/foo` is equivalent to `/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: ID of the owner.
          required: true
          type: string
        - name: id
          in: path
          description: ID of the sublist to delete.
          required: true
          type: string
      responses:
        '200':
          description: ok
    post:
      parameters:
        - name: owenerType
          required: false
  /sublist/list/id/{ownerType}/{ownerId}:
    get:
      tags:
        - sublist
      summary: List sublists by owner ID
      description: Returns all sublists under the specified owner (by ID).
      operationId: getSublistsByProjectId
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/list/id/foo` is equivalent to `/list/id/project/foo`.
          required: true
          type: string
        - name: ownerId
          in: path
          description: ID of the owner.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Sublist'
  /sublist/list/{ownerType}/{ownerOid}:
    get:
      tags:
        - sublist
      summary: List sublists by owner OID
      description: Returns all sublists under the specified owner (by OID).
      operationId: getSublistsByProjectOid
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/list/abc123` is equivalent to `/list/project/abc123`.
          required: true
          type: string
        - name: ownerOid
          in: path
          description: OID of the owner.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Sublist'
  /sublist/{oid}:
    get:
      tags:
        - sublist
      summary: Get a sublist by OID
      description: Returns the complete sublist record for the given OID.
      operationId: getSublist
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the sublist.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    put:
      tags:
        - sublist
      summary: Update a sublist by OID
      description: Updates an existing sublist and returns the complete updated record.
      operationId: updateSublist
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the sublist to update.
          required: true
          type: string
        - in: body
          name: body
          description: Sublist updates
          required: true
          schema:
            $ref: '#/definitions/UpdateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    delete:
      tags:
        - sublist
      summary: Delete a sublist by OID
      description: Deletes the sublist with the given OID.
      operationId: deleteSublist
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the sublist to delete.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /sublist/{ownerType}/{ownerOid}:
    post:
      tags:
        - sublist
      summary: Create a sublist by owner OID
      description: Creates a new sublist under the specified owner (by OID).
      operationId: createSublist
      produces:
        - application/json
      parameters:
        - name: ownerType
          in: path
          description: |-
            Owner type. One of `project`, `organization`, `folder`, or `smart-folder`.
            If omitted, `project` is assumed. For example, `/abc123` is equivalent to `/project/abc123`.
          required: true
          type: string
        - name: ownerOid
          in: path
          description: OID of the owner the new sublist will belong to.
          required: true
          type: string
        - in: body
          name: body
          description: Sublist to create
          required: true
          schema:
            $ref: '#/definitions/CreateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
  /tag/id/{projectId}:
    post:
      tags:
        - tag
      summary: Create a tag
      description: Creates a new tag in the specified project (by ID).
      operationId: createTagToProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: |-
            ID of the project to add the new tag to.
            Specify "-" to add it to personal tasks (My Tasks, not in a specific project).
          required: true
          type: string
        - in: body
          name: body
          description: Tag to create
          required: true
          schema:
            $ref: '#/definitions/CreateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
  /tag/list/id/{projectId}:
    get:
      tags:
        - tag
      summary: List tags by project ID
      description: Returns all tags in the specified project (by ID).
      operationId: getTagsByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: |-
            ID of the project.
            Specify "-" to list tags used in personal tasks (My Tasks, not in a specific project).
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  /tag/list/{projectOid}:
    get:
      tags:
        - tag
      summary: List tags by project OID
      description: Returns all tags in the specified project (by OID).
      operationId: getTagsByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: |-
            OID of the project.
            Specify "-" to list tags used in personal tasks (My Tasks, not in a specific project).
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  /tag/{oid}:
    get:
      tags:
        - tag
      summary: Get a tag
      description: Returns the complete tag record for the given OID.
      operationId: getTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the tag to fetch.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    put:
      tags:
        - tag
      summary: Update a tag
      description: Updates an existing tag and returns the complete updated record.
      operationId: updateTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the tag to update.
          required: true
          type: string
        - in: body
          name: body
          description: Tag updates
          required: true
          schema:
            $ref: '#/definitions/UpdateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    delete:
      tags:
        - tag
      summary: Delete a tag
      description: Deletes the tag with the given OID.
      operationId: deleteTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the tag to delete.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /tag/{projectOid}:
    post:
      tags:
        - tag
      summary: Create a tag
      description: Creates a new tag in the specified project (by OID).
      operationId: createTag
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: |-
            OID of the project to add the new tag to.
            Specify "-" to add it to personal tasks (My Tasks, not in a specific project).
          required: true
          type: string
        - in: body
          name: body
          description: Tag to create
          required: true
          schema:
            $ref: '#/definitions/CreateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
  /task/after/{oid}:
    post:
      tags:
        - task
      summary: Add a new task after the given task.
      description: Inserts a new task after the specified task.
      operationId: createTaskAfter
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the task to insert after.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  /task/attach/{projectId}/{id}/{filename}:
    post:
      tags:
        - task
      summary: Upload an attachment to a task by ID.
      description: Uploads an attachment to an existing task.
      operationId: attachCommentById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to update tasks in My Tasks (no specific project).
          required: true
          type: string
        - name: id
          in: path
          description: Task ID.
          required: true
          type: integer
          format: int32
        - name: filename
          in: path
          description: |-
            Attachment file name, e.g., `readme.txt`.

            Provide a meaningful extension so the browser can recognize the MIME type (e.g., `revenue.pdf`, `contacts.json`).

            Alternatively, set the MIME type via the `Content-Type` header.
          required: true
          type: string
        - in: body
          name: body
          description: Attachment content (raw bytes). For images, the body is the image itself.
          required: true
          schema:
            type: object
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SimpleAttachment'
  /task/attach/{taskOid}/{filename}:
    post:
      tags:
        - task
      summary: Upload an attachment to a task by OID.
      description: Uploads an attachment to an existing task.
      operationId: attachCommentByOid
      produces:
        - application/json
      parameters:
        - name: taskOid
          in: path
          description: Task OID.
          required: true
          type: string
        - name: filename
          in: path
          description: |-
            Attachment file name, e.g., `readme.txt`.

            Provide a meaningful extension so the browser can recognize the MIME type (e.g., `revenue.pdf`, `contacts.json`).

            Alternatively, set the MIME type via the `Content-Type` header.
          required: true
          type: string
        - in: body
          name: body
          description: Attachment content (raw bytes). For images, the body is the image itself.
          required: true
          schema:
            type: object
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SimpleAttachment'
  /task/before/{oid}:
    post:
      tags:
        - task
      summary: Add a new task before the given task.
      description: Inserts a new task before the specified task.
      operationId: createTaskBefore
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the task to insert before.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  /task/id/{projectId}:
    post:
      tags:
        - task
      summary: Add a new task.
      description: Adds a new root task to a project.
      operationId: createTaskByProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to add it to My Tasks (no specific project).
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  /task/id/{projectId}/{id}:
    get:
      tags:
        - task
      summary: Get an existing task by its ID.
      description: Returns the full task record.
      operationId: getTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to retrieve My Tasks (no specific project).
          required: true
          type: string
        - name: id
          in: path
          description: Task ID.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - task
      summary: Update an existing task by its ID.
      description: Updates an existing task and returns the updated record.
      operationId: updateTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to update tasks in My Tasks (no specific project).
          required: true
          type: string
        - name: id
          in: path
          description: Task ID.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Updated task content.
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  /task/list/id/{projectId}:
    get:
      tags:
        - task
      summary: Get all root tasks of the given project.
      description: |-
        Returns all root tasks of the project.

        To retrieve all tasks (including all subtasks), use the search API with `limit=no`.
      operationId: getRootTasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to retrieve My Tasks (no specific project).
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  /task/list/id/{projectId}/{taskId}:
    get:
      tags:
        - task
      summary: Get all subtasks of the given task.
      description: |-
        Returns all direct subtasks of the specified task.
        Note: only one level is returned—subtasks of subtasks are not included; retrieve them recursively.
      operationId: getSubtasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to retrieve My Tasks (no specific project).
          required: true
          type: string
        - name: taskId
          in: path
          description: Parent task ID.
          required: true
          type: integer
          format: int32
        - name: status
          in: query
          description: Task status filter. Specify a value 0–100, or use "active" for active tasks or "completed" for completed tasks.
          required: false
          type: string
          x-example: active
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  /task/list/{oid}:
    get:
      tags:
        - task
      summary: Get all root tasks of the given project or all subtasks of the given task.
      description: |-
        Returns all root tasks of a project or all direct subtasks of a task by OID. If the OID is a project, root tasks are returned. If it is a task, its direct subtasks are returned.
        Note: only one level is returned—subtasks of subtasks are not included; retrieve them recursively.
      operationId: getTasksByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the project or parent task. Specify "-" to retrieve My Tasks (no specific project).
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  /task/search-folder/id/{folderId}:
    get:
      tags:
        - task
      summary: Search tasks in a folder by folder ID.
      description: |-
        Returns tasks that match the specified criteria in the given folder. Tasks in archived projects are excluded.

        > Available for Professional plans and above
      operationId: searchTasksByFolderId
      produces:
        - application/json
      parameters:
        - name: folderId
          in: path
          description: Folder ID.
          required: true
          type: string
        - name: text
          in: query
          description: |-
            Full-text query against task name, description, and attachments.
            Note: does not include comment content or comment attachments.
            Indexing can take ~10 seconds or more after updates.
          required: false
          type: string
        - name: name
          in: query
          description: Task name filter. Prefix with `~` for regex, `~*` for case-insensitive regex. Use `text` for full-text search.
          required: false
          type: string
          x-example: My first task
        - name: description
          in: query
          description: Task description filter. Prefix with `~` for regex, `~*` for case-insensitive regex.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: status
          in: query
          description: Task status filter. Specify 0–100, or "active" / "completed".
          required: false
          type: string
          x-example: active
        - name: scheduled
          in: query
          description: Return only scheduled tasks (start or due is set). If `scheduled=false`, returns only tasks where neither start nor due is set.
          required: false
          type: boolean
          x-example: true
        - name: mine
          in: query
          description: Return only "My Tasks" (assigned to me, or created by me and scheduled but unassigned).
          required: false
          type: boolean
          x-example: true
        - name: modified
          in: query
          description: Return only tasks created or modified recently. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: commented
          in: query
          description: Return only tasks with recent comments. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: limit
          in: query
          description: |-
            Maximum number of tasks to return. Default: 30. Use `no` to return all matches.

            Note: On free plans, this cannot exceed 30 or `no` (unlimited).
          required: false
          type: string
          x-example: 'no'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskWithProject'
  /task/search-folder/{folderOid}:
    get:
      tags:
        - task
      summary: Search tasks in a folder by folder OID.
      description: |-
        Returns tasks that match the specified criteria in the given folder. Tasks in archived projects are excluded.

        > Available for Professional plans and above
      operationId: searchTasksByFolderOid
      produces:
        - application/json
      parameters:
        - name: folderOid
          in: path
          description: Folder OID.
          required: true
          type: string
        - name: text
          in: query
          description: |-
            Full-text query against task name, description, and attachments.
            Note: does not include comment content or comment attachments.
            Indexing can take ~10 seconds or more after updates.
          required: false
          type: string
        - name: name
          in: query
          description: Task name filter. Prefix with `~` for regex, `~*` for case-insensitive regex. Use `text` for full-text search.
          required: false
          type: string
          x-example: My first task
        - name: description
          in: query
          description: Task description filter. Prefix with `~` for regex, `~*` for case-insensitive regex.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: status
          in: query
          description: Task status filter. Specify 0–100, or "active" / "completed".
          required: false
          type: string
          x-example: active
        - name: scheduled
          in: query
          description: Return only scheduled tasks (start or due is set). If `scheduled=false`, returns only tasks where neither start nor due is set.
          required: false
          type: boolean
          x-example: true
        - name: mine
          in: query
          description: Return only "My Tasks" (assigned to me, or created by me and scheduled but unassigned).
          required: false
          type: boolean
          x-example: true
        - name: modified
          in: query
          description: Return only tasks created or modified recently. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: commented
          in: query
          description: Return only tasks with recent comments. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: limit
          in: query
          description: |-
            Maximum number of tasks to return. Default: 30. Use `no` to return all matches.

            Note: On free plans, this cannot exceed 30 or `no` (unlimited).
          required: false
          type: string
          x-example: 'no'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskWithProject'
  /task/search-organization/id/{organizationId}:
    get:
      tags:
        - task
      summary: Search tasks in an organization by organization ID.
      description: |-
        Returns tasks that match the specified criteria in the given organization. Tasks in archived projects are excluded.

        > Available for Professional plans and above
      operationId: searchTasksByOrgId
      produces:
        - application/json
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          type: string
        - name: text
          in: query
          description: |-
            Full-text query against task name, description, and attachments.
            Note: does not include comment content or comment attachments.
            Indexing can take ~10 seconds or more after updates.
          required: false
          type: string
        - name: name
          in: query
          description: Task name filter. Prefix with `~` for regex, `~*` for case-insensitive regex. Use `text` for full-text search.
          required: false
          type: string
          x-example: My first task
        - name: description
          in: query
          description: Task description filter. Prefix with `~` for regex, `~*` for case-insensitive regex.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: status
          in: query
          description: Task status filter. Specify 0–100, or "active" / "completed".
          required: false
          type: string
          x-example: active
        - name: scheduled
          in: query
          description: Return only scheduled tasks (start or due is set). If `scheduled=false`, returns only tasks where neither start nor due is set.
          required: false
          type: boolean
          x-example: true
        - name: mine
          in: query
          description: Return only "My Tasks" (assigned to me, or created by me and scheduled but unassigned).
          required: false
          type: boolean
          x-example: true
        - name: modified
          in: query
          description: Return only tasks created or modified recently. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: commented
          in: query
          description: Return only tasks with recent comments. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: limit
          in: query
          description: |-
            Maximum number of tasks to return. Default: 30. Use `no` to return all matches.

            Note: On free plans, this cannot exceed 30 or `no` (unlimited).
          required: false
          type: string
          x-example: 'no'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskWithProject'
  /task/search-organization/{organizationOid}:
    get:
      tags:
        - task
      summary: Search tasks in an organization by organization OID.
      description: |-
        Returns tasks that match the specified criteria in the given organization. Tasks in archived projects are excluded.

        > Available for Professional plans and above
      operationId: searchTasksByOrgOid
      produces:
        - application/json
      parameters:
        - name: organizationOid
          in: path
          description: Organization OID.
          required: true
          type: string
        - name: text
          in: query
          description: |-
            Full-text query against task name, description, and attachments.
            Note: does not include comment content or comment attachments.
            Indexing can take ~10 seconds or more after updates.
          required: false
          type: string
        - name: name
          in: query
          description: Task name filter. Prefix with `~` for regex, `~*` for case-insensitive regex. Use `text` for full-text search.
          required: false
          type: string
          x-example: My first task
        - name: description
          in: query
          description: Task description filter. Prefix with `~` for regex, `~*` for case-insensitive regex.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: status
          in: query
          description: Task status filter. Specify 0–100, or "active" / "completed".
          required: false
          type: string
          x-example: active
        - name: scheduled
          in: query
          description: Return only scheduled tasks (start or due is set). If `scheduled=false`, returns only tasks where neither start nor due is set.
          required: false
          type: boolean
          x-example: true
        - name: mine
          in: query
          description: Return only "My Tasks" (assigned to me, or created by me and scheduled but unassigned).
          required: false
          type: boolean
          x-example: true
        - name: modified
          in: query
          description: Return only tasks created or modified recently. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: commented
          in: query
          description: Return only tasks with recent comments. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: limit
          in: query
          description: |-
            Maximum number of tasks to return. Default: 30. Use `no` to return all matches.

            Note: On free plans, this cannot exceed 30 or `no` (unlimited).
          required: false
          type: string
          x-example: 'no'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskWithProject'
  /task/search/id/{projectId}:
    get:
      tags:
        - task
      summary: Search tasks in a project by project ID.
      description: Returns tasks that match the specified criteria in the project.
      operationId: searchTasksById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID. Specify "-" to search in My Tasks (no specific project).
          required: true
          type: string
        - name: text
          in: query
          description: |-
            Full-text query against task name, description, and attachments.
            Note: does not include comment content or comment attachments.
            Indexing can take ~10 seconds or more after updates.
          required: false
          type: string
        - name: name
          in: query
          description: Task name filter. Prefix with `~` for regex, `~*` for case-insensitive regex. Use `text` for full-text search.
          required: false
          type: string
          x-example: My first task
        - name: description
          in: query
          description: Task description filter. Prefix with `~` for regex, `~*` for case-insensitive regex.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: sublist
          in: query
          description: Task sublist ID or OID filter.
          required: false
          type: string
          x-example: Top
        - name: status
          in: query
          description: Task status filter. Specify 0–100, or "active" / "completed".
          required: false
          type: string
          x-example: active
        - name: scheduled
          in: query
          description: Return only scheduled tasks (start or due is set). If `scheduled=false`, returns only tasks where neither start nor due is set.
          required: false
          type: boolean
          x-example: true
        - name: mine
          in: query
          description: Return only "My Tasks" (assigned to me, or created by me and scheduled but unassigned).
          required: false
          type: boolean
          x-example: true
        - name: modified
          in: query
          description: Return only tasks created or modified recently. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: commented
          in: query
          description: Return only tasks with recent comments. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: limit
          in: query
          description: |-
            Maximum number of tasks to return. Default: 30. Use `no` to return all matches.

            Note: On free plans, this cannot exceed 30 or `no` (unlimited).
          required: false
          type: string
          x-example: 'no'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  /task/search/{projectOid}:
    get:
      tags:
        - task
      summary: Search tasks in a project by project OID.
      description: Returns tasks that match the specified criteria in the project.
      operationId: searchTasksByOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: Project OID. Specify "-" to search in My Tasks (no specific project).
          required: true
          type: string
        - name: text
          in: query
          description: |-
            Full-text query against task name, description, and attachments.
            Note: does not include comment content or comment attachments.
            Indexing can take ~10 seconds or more after updates.
          required: false
          type: string
        - name: name
          in: query
          description: Task name filter. Prefix with `~` for regex, `~*` for case-insensitive regex. Use `text` for full-text search.
          required: false
          type: string
          x-example: My first task
        - name: description
          in: query
          description: Task description filter. Prefix with `~` for regex, `~*` for case-insensitive regex.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: sublist
          in: query
          description: Task sublist ID or OID filter.
          required: false
          type: string
          x-example: Top
        - name: status
          in: query
          description: Task status filter. Specify 0–100, or "active" / "completed".
          required: false
          type: string
          x-example: active
        - name: scheduled
          in: query
          description: Return only scheduled tasks (start or due is set). If `scheduled=false`, returns only tasks where neither start nor due is set.
          required: false
          type: boolean
          x-example: true
        - name: mine
          in: query
          description: Return only "My Tasks" (assigned to me, or created by me and scheduled but unassigned).
          required: false
          type: boolean
          x-example: true
        - name: modified
          in: query
          description: Return only tasks created or modified recently. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: commented
          in: query
          description: Return only tasks with recent comments. Specify an integer (days); default 7 if omitted. Supports `d`, `h`, `m` suffixes (e.g., `8h`).
          required: false
          type: string
          x-example: '7'
        - name: sourceRef
          in: query
          description: |-
            Filter by source ref key.
            See `sourceRef` in the task creation API.
          required: false
          type: string
          x-example: git
        - name: limit
          in: query
          description: |-
            Maximum number of tasks to return. Default: 30. Use `no` to return all matches.

            Note: On free plans, this cannot exceed 30 or `no` (unlimited).
          required: false
          type: string
          x-example: 'no'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  /task/{oid}:
    get:
      tags:
        - task
      summary: Get an existing task by its OID.
      description: Returns the full task record.
      operationId: getTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Task OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    post:
      tags:
        - task
      summary: Add a new task.
      description: Adds a new task to a project or to another task.
      operationId: createTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the project or task to add the new task to. If the OID refers to a project, the new task becomes a root task. If it refers to a task, the new task becomes its subtask. Specify "-" to add it to My Tasks (no specific project).
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - task
      summary: Update an existing task by its OID.
      description: Updates an existing task and returns the updated record.
      operationId: updateTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Task OID.
          required: true
          type: string
        - in: body
          name: body
          description: Updated task content.
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
        - task
      summary: Delete a task and all of its subtasks.
      description: Deletes an existing task and all of its subtasks.
      operationId: deleteTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Task OID.
          required: true
          type: string
      responses:
        '200':
          description: ok
  /user/id/{id}:
    get:
      tags:
        - user
      summary: Get a user by ID or email address.
      description: Returns the full user record for the given user ID, email address, or "me" (the current user).
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: |-
            User ID, email address, or "me".
            Example: "john@gmail.com", "me"
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
  /user/list:
    get:
      tags:
        - user
      summary: Get all user records.
      description: |-
        Returns all colleagues of the current user if the user granted the app access to contacts. Otherwise, returns only colleagues who also authorized the same app.
        If the user did not grant contact access and none of the user’s colleagues authorized this app, only the current user is returned.
        The first record is always the current user.
      operationId: getUsers
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user/list/project/id/{projectId}:
    get:
      tags:
        - user
      summary: Get all user records of the given project (by project ID).
      description: |-
        Returns all members of the specified project by project ID.
        If the current user did not grant the app access to contacts, only basic information is returned.
        The first record is always the current user.
      operationId: getUsersOfProjectById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: Project ID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user/list/project/{oid}:
    get:
      tags:
        - user
      summary: Get all user records of the given project (by project OID).
      description: |-
        Returns all members of the specified project by project OID.
        If the current user did not grant the app access to contacts, only basic information is returned.
        The first record is always the current user.
      operationId: getUsersOfProjectByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: Project OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user/{oid}:
    get:
      tags:
        - user
      summary: Get a user by OID.
      description: Returns the full user record for the given OID.
      operationId: getUserByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: User OID.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2:
    type: oauth2
    authorizationUrl: https://quire.io/oauth
    tokenUrl: https://quire.io/oauth/token
    flow: accessCode
definitions:
  Attachment:
    type: object
    properties:
      type:
        type: integer
        format: int32
        example: 2
        description: Attachment source type. 1 = Google Drive, 2 = Quire storage.
      name:
        type: string
        example: file.txt
        description: File name of the attachment.
      length:
        type: integer
        format: int32
        example: 20000
        description: Size of the attachment in bytes.
      url:
        type: string
        example: https://quire.io/att/Ta/sdcQOGgeUtyaFFzb9p0IwAgi/qfqVmUtC/image.png
        description: Direct URL to access this attachment.
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  Change:
    type: object
    required:
      - task
    properties:
      task:
        type: string
        example: 2MmYOpJH_ZLeehIjjytH1Rwr
        description: OID of the task to include or exclude.
      exclude:
        type: boolean
        example: false
        description: 'Whether to exclude the task. Default: false (include).'
      single:
        type: boolean
        example: false
        description: 'Whether the operation applies only to the specified task. Default: false — all descendant tasks are also included or excluded. Note: this does not change descendants that were explicitly included or excluded in prior operations.'
  Chat:
    type: object
    properties:
      url:
        type: string
        example: https://quire.io/w/my_project?chat=Highlight101
        description: URL of this chat on the Quire website.
      name:
        type: string
        example: Highlight 101
        description: Display name (Markdown supported).
      id:
        type: string
        example: Highlight101
        description: ID.
      nameText:
        type: string
        example: Highlight 101
        description: Name with Markdown removed.
      nameHtml:
        type: string
        example: Highlight 101
        description: Name rendered as an HTML fragment converted from Markdown.
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      partner:
        position: 15
        description: External team this record belongs to. Null if the record is not accessible to external-team members.
        $ref: '#/definitions/SimpleTaggingEntity'
      archivedAt:
        type: string
        example: '2020-02-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this record was archived. Null if not archived.
      start:
        type: string
        example: '2024-01-02'
        position: 50
        description: Target start date for this record, or null if not specified.
      due:
        type: string
        example: '2024-05-25'
        position: 50
        description: Target due date for this record, or null if not specified.
      owner:
        position: 99
        description: Project this chat channel belongs to.
        $ref: '#/definitions/ChatOwner'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  ChatOwner:
    type: object
    properties:
      type:
        type: string
        example: Project
        description: Type of the owning object (e.g., Project).
      url:
        type: string
        example: https://quire.io/w/prj_id
        description: URL of this owner on the Quire website.
      id:
        type: string
        example: my_id
        description: Identifier for this record.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: Foo
        description: Display name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  Comment:
    type: object
    properties:
      oid:
        type: string
        example: iDsPd.QP_qM.hN.Trymukn8b
        description: Object identifier (OID), a UUID-like unique string.
      description:
        type: string
        example: It is *cool*!
        position: 1
        description: Comment content (Markdown supported).
      descriptionText:
        type: string
        example: It is cool!
        position: 1
        description: Comment content with Markdown removed.
      descriptionHtml:
        type: string
        example: It is <i>cool</i>!
        position: 1
        description: Comment content rendered as an HTML fragment converted from Markdown.
      attachments:
        type: array
        position: 8
        description: Attachments associated with this comment.
        items:
          $ref: '#/definitions/Attachment'
      editedBy:
        position: 50
        description: User who last edited this comment, or null if not edited.
        $ref: '#/definitions/SimpleIdentity'
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this comment was last edited, or null if not edited.
      url:
        type: string
        position: 50
        description: URL of this comment on the Quire website.
      pinAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this comment was pinned, or null if not pinned.
      pinBy:
        position: 50
        description: User who pinned this comment, or null if not pinned.
        $ref: '#/definitions/SimpleIdentity'
      owner:
        position: 99
        description: Object this comment was added to.
        $ref: '#/definitions/CommentOwner'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  CommentOwner:
    type: object
    properties:
      type:
        type: string
        example: Project
        description: Type of the owning object (e.g., Project).
      url:
        type: string
        example: https://quire.io/w/my_id
        description: URL of this owner on the Quire website.
      name:
        type: string
        example: Foo
        description: Display name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  CreateChatBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Highlight 101
        description: Display name of the record (Markdown supported).
      id:
        type: string
        example: Highlight101
        description: (Optional) ID for this record. If omitted, Quire generates one automatically. Must be unique within the project.
      description:
        type: string
        example: '**Great** record to start with.'
        description: (Optional) Description of the record (Markdown supported).
      iconColor:
        type: string
        example: '37'
        description: (Optional) Icon color index from Quire’s predefined palette.
      image:
        type: string
        example: icon-view-kanban
        description: |-
          (Optional) Icon image identifier. Must be one of the predefined values:
            'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o',
            'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o',
            'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail',
            'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o',
            'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down',
            'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 15
        description: (Optional) OID of the external team this record belongs to.
      start:
        type: string
        example: '2024-01-02'
        position: 50
        description: (Optional) Target start date.
      due:
        type: string
        example: '2024-05-25'
        position: 50
        description: (Optional) Target due date.
  CreateCommentBody:
    type: object
    required:
      - description
    properties:
      description:
        type: string
        example: Adjust style
        description: Content of the new comment (Markdown supported).
      asUser:
        type: boolean
        example: true
        description: '(Optional) If true, marks this comment as created by the app. Default: false (created by the authorizing user).'
      pinned:
        type: boolean
        example: false
        description: '(Optional) Whether to pin this comment. Default: false.'
  CreateDocBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Highlight 101
        description: Display name of the record (Markdown supported).
      id:
        type: string
        example: Highlight101
        description: (Optional) ID for this record. If omitted, Quire generates one automatically. Must be unique within the project.
      description:
        type: string
        example: '**Great** record to start with.'
        description: (Optional) Description of the record (Markdown supported).
      iconColor:
        type: string
        example: '37'
        description: (Optional) Icon color index from Quire’s predefined palette.
      image:
        type: string
        example: icon-view-kanban
        description: |-
          (Optional) Icon image identifier. Must be one of the predefined values:
            'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o',
            'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o',
            'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail',
            'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o',
            'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down',
            'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 15
        description: (Optional) OID of the external team this record belongs to.
      start:
        type: string
        example: '2024-01-02'
        position: 50
        description: (Optional) Target start date.
      due:
        type: string
        example: '2024-05-25'
        position: 50
        description: (Optional) Target due date.
  CreateNotificationBody:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        example: Unable to synchronize
        description: Notification message.
      url:
        type: string
        example: https://superheros.com/sync
        description: (Optional) URL associated with the message. When provided, the client may render the message as a hyperlink.
  CreateStatusBody:
    type: object
    required:
      - name
      - value
    properties:
      name:
        type: string
        example: Doing
        description: Display name of the status.
      value:
        type: integer
        format: int32
        example: 50
        description: Non-negative integer indicating progress. Must be unique within its context (e.g., project). Values ≥ 100 are treated as completed.
      color:
        type: string
        example: '35'
        description: '(Optional) Status color index from Quire’s predefined palette. If omitted, a color will be generated automatically. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `35`).'
  CreateSublistBody:
    type: object
    required:
      - name
    properties:
      includes:
        type: array
        description: (Optional) List of task OIDs to include in this sublist. All descendants of the specified tasks will be included as well.
        items:
          type: string
      name:
        type: string
        example: Highlight 101
        description: Display name of the record (Markdown supported).
      id:
        type: string
        example: Highlight101
        description: (Optional) ID for this record. If omitted, Quire generates one automatically. Must be unique within the project.
      description:
        type: string
        example: '**Great** record to start with.'
        description: (Optional) Description of the record (Markdown supported).
      iconColor:
        type: string
        example: '37'
        description: (Optional) Icon color index from Quire’s predefined palette.
      image:
        type: string
        example: icon-view-kanban
        description: |-
          (Optional) Icon image identifier. Must be one of the predefined values:
            'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o',
            'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o',
            'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail',
            'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o',
            'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down',
            'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 15
        description: (Optional) OID of the external team this record belongs to.
      start:
        type: string
        example: '2024-01-02'
        position: 50
        description: (Optional) Target start date.
      due:
        type: string
        example: '2024-05-25'
        position: 50
        description: (Optional) Target due date.
  CreateTagBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Later
        description: Display name of the tag.
      global:
        type: boolean
        example: true
        description: (Optional) Whether this tag is global (available across projects). If omitted, the tag is not global.
      color:
        type: string
        example: '35'
        description: '(Optional) Tag color index from Quire’s predefined palette. If omitted, a color will be generated automatically. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `35`).'
  CreateTaskBody:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Design new **logo**
        description: The name of the task.
      description:
        type: string
        example: This is a *cool* task.
        description: (Optional) A description of the task.
      peekaboo:
        type: object
        example: true
        description: |-
          (Optional) Peekaboo setting.

          - `true`: Hide indefinitely.
          - Positive integer: Number of days to hide.
          - `false`: Cancel previous peekaboo.

          Default: false.
        anyOf:
          - type: boolean
          - type: integer
      yourField:
        type: object
        description: |-
          (Optional) Value for a custom field, depending on field definition.

          - Money: specify the numeric value only (no currency).
          - User/Task: specify the OID.
          - Duration: specify number of seconds.
          - Multi-value: specify a list.
      assignees:
        type: array
        description: |-
          (Optional) A list of user identifiers (OID, ID, or email) to assign this task to.

          - Use "me" to indicate the current user.
          - Use "inherit" to include all assignees of the parent task.

          Example: `{"addAssignees": ["me", "inherit", "foo@domain.com"]}`
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      recurrence:
        description: |-
          (Optional) Recurrence details. Null if the task is not recurring.

          - `freq`: `daily`, `weekly`, `monthly`, `yearly`.
          - `interval`: Interval between occurrences. Default: 1.
          - `until`: End date. Default: never ends.
          - `bymonth`: Month (1 = January). Supported only with `yearly`. Default: 1.
          - `byweekno`: Week number (starting from 1) or `last`. Supported with `monthly`/`yearly`.
          - `byweekday`: Day(s) of week (0 = Monday ... 6 = Sunday). For weekly, use a list (e.g., `[0,3]`).
          - `bydayno`: Day of month (1 = first day). Supported with `monthly`/`yearly`.
            Note: `byweekday` and `bydayno` cannot both be specified.
          - `dupsubtasks`: Whether to duplicate subtasks when completed. Default: true.
          - `sincelatest`: For `daily` only. Whether to repeat based on last completion date. Default: false.
        $ref: '#/definitions/Recurrence'
      successors:
        type: array
        description: |-
          (Optional) List of successor task identifiers (OID or ID).

          IDs can be specified as `#id` or `id`.

          Examples: `'AMZ0-59R125-35KTK2356G'`, `'#13'`, `135`.
        items:
          type: string
      followers:
        type: array
        description: |-
          (Optional) List of user identifiers (OID, ID, or email) who follow this task.

          - Use "me" for the current user.
          - Use "inherit" to include followers of the parent task.
          - Use "app" for the application itself to follow (receive notifications).

          For app followers, additional syntaxes are supported:
          - `app|team` or `app|team|channel`
          - `app|/path` → appended to the hook URL (e.g., `.../standard/soc1/33456/a7`).
        items:
          type: string
        example:
          - tzufRLqCnud74dARyDSvjWDl
      tasks:
        type: array
        description: (Optional) List of subtasks to create along with this task.
        items:
          $ref: '#/definitions/CreateTaskBody'
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        description: |-
          (Optional) Start date/time in UTC.

          - With time: `yyyy-MM-dd'T'HH:mmZ` (e.g., `2020-10-30T09:30Z`).
          - Date only: `yyyy-MM-dd` (e.g., `2020-10-30`).

          Notes:
          - Seconds are not supported.
          - `2020-10-30T00:00:00` is treated as `2020-10-30` (date only).
          - To specify exactly midnight UTC, use `2020-10-30T00:00` (no seconds).
      section:
        type: boolean
        example: true
        description: '(Optional) Whether this task is a section. Default: false.'
      asUser:
        type: boolean
        example: true
        description: |-
          (Optional) If true, marks this task as created by the app.
          Default: false (created by the authorizing user).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        description: |-
          (Optional) Due date/time in UTC.

          - With time: `yyyy-MM-dd'T'HH:mmZ` (e.g., `2020-10-30T09:30Z`).
          - Date only: `yyyy-MM-dd` (e.g., `2020-10-30`).

          Notes:
          - Seconds are not supported.
          - `2020-10-30T00:00:00` is treated as `2020-10-30` (date only).
          - To specify exactly midnight UTC, use `2020-10-30T00:00` (no seconds).
      tags:
        type: array
        description: |-
          (Optional) A list of tag OIDs or names to be added to the new task.
          Tag names are case-insensitive.
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: '(Optional) Task priority. Must be between -1 (lowest) and 2 (highest). Default: 0.'
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: '(Optional) Task status. Must be between 0 and 100. Default: 0.'
      etc:
        type: integer
        format: int32
        example: 0
        position: 4
        description: (Optional) Estimated time to complete, in seconds. Must be non-negative.
      sourceRef:
        type: object
        example: '{''text'': ''Source: [Gmail](https://gmail.com/link)''}'
        position: 60
        description: |+
          (Optional) Arbitrary source reference data to attach to the task.
          Available via API when retrieving the task.

          If the entry contains a key `text`, its value will be displayed client-side and should be formatted in Markdown. It is recommended to include a source link.

        additionalProperties:
          type: object
  Doc:
    type: object
    properties:
      url:
        type: string
        example: https://quire.io/w/my_project?doc=Highlight101
        description: URL of this document on the Quire website.
      name:
        type: string
        example: Highlight 101
        description: Display name (Markdown supported).
      id:
        type: string
        example: Highlight101
        description: ID.
      nameText:
        type: string
        example: Highlight 101
        description: Name with Markdown removed.
      nameHtml:
        type: string
        example: Highlight 101
        description: Name rendered as an HTML fragment converted from Markdown.
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      partner:
        position: 15
        description: External team this record belongs to. Null if the record is not accessible to external-team members.
        $ref: '#/definitions/SimpleTaggingEntity'
      archivedAt:
        type: string
        example: '2020-02-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this record was archived. Null if not archived.
      start:
        type: string
        example: '2024-01-02'
        position: 50
        description: Target start date for this record, or null if not specified.
      due:
        type: string
        example: '2024-05-25'
        position: 50
        description: Target due date for this record, or null if not specified.
      owner:
        position: 99
        description: Project this document belongs to.
        $ref: '#/definitions/DocOwner'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  DocOwner:
    type: object
    properties:
      type:
        type: string
        example: Project
        description: Type of the owning object (e.g., Project).
      url:
        type: string
        example: https://quire.io/w/prj_id
        description: URL of this owner on the Quire website.
      id:
        type: string
        example: my_id
        description: Identifier for this record.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: Foo
        description: Display name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  Organization:
    type: object
    properties:
      name:
        type: string
        example: My Organization
        description: Display name of the organization (Markdown supported).
      id:
        type: string
        example: my_organization
        description: Organization ID.
      nameText:
        type: string
        example: My Organization
        description: Organization name with Markdown removed.
      nameHtml:
        type: string
        example: My Organization
        description: Organization name rendered as an HTML fragment converted from Markdown.
      url:
        type: string
        example: https://quire.io/c/my_organization
        description: URL of this organization on the Quire website.
      email:
        type: string
        example: info@company.com
        description: Organization email address.
        allowEmptyValue: true
      website:
        type: string
        example: https://coolwebsites.com
        description: Website URL.
        allowEmptyValue: true
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      followers:
        type: array
        position: 60
        description: Users who follow this organization.
        items:
          $ref: '#/definitions/SimpleIdentity'
      createdBy:
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  OrganizationWithPlan:
    type: object
    properties:
      name:
        type: string
        example: My Organization
        description: Display name of the organization (Markdown supported).
      id:
        type: string
        example: my_organization
        description: Organization ID.
      nameText:
        type: string
        example: My Organization
        description: Organization name with Markdown removed.
      nameHtml:
        type: string
        example: My Organization
        description: Organization name rendered as an HTML fragment converted from Markdown.
      url:
        type: string
        example: https://quire.io/c/my_organization
        description: URL of this organization on the Quire website.
      email:
        type: string
        example: info@company.com
        description: Organization email address.
        allowEmptyValue: true
      website:
        type: string
        example: https://coolwebsites.com
        description: Website URL.
        allowEmptyValue: true
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      subscription:
        position: 9
        description: Subscription details for this organization.
        $ref: '#/definitions/Subscription'
      followers:
        type: array
        position: 60
        description: Users who follow this organization.
        items:
          $ref: '#/definitions/SimpleIdentity'
      createdBy:
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  Partner:
    type: object
    properties:
      name:
        type: string
        example: UI design team
        description: Display name of the external team.
      color:
        type: string
        example: '35'
        description: Color index from Quire’s predefined color palette. Two-digit code where the first digit is 0–5 and the second digit is 0–7 (e.g., `35`). The palette is available in Quire’s color picker.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        position: 2
        description: Image URL representing this team.
      project:
        position: 99
        description: The project this tag belongs to.
        $ref: '#/definitions/SimpleIdentity'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  Project:
    type: object
    properties:
      activeCount:
        type: integer
        format: int32
        example: 20
        description: Number of active (not completed) tasks in this project.
      taskCount:
        type: integer
        format: int32
        example: 30
        description: Total number of tasks in this project.
      name:
        type: string
        example: My Project
        description: Display name of the project (Markdown supported).
      id:
        type: string
        example: my_project
        description: Project ID.
      organization:
        description: Organization this project belongs to.
        $ref: '#/definitions/SimpleIdentity'
      rootCount:
        type: integer
        format: int32
        example: 5
        description: Number of root (top-level) tasks in this project.
      nameText:
        type: string
        example: My Project
        description: Project name with Markdown removed.
      nameHtml:
        type: string
        example: My Project
        description: Project name rendered as an HTML fragment converted from Markdown.
      url:
        type: string
        example: https://quire.io/w/my_project
        description: URL of this project on the Quire website.
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      archivedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this project was archived (peekaboo). Null if not archived.
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this record was last edited.
      attachments:
        type: array
        position: 60
        description: Attachments associated with this project.
        items:
          $ref: '#/definitions/Attachment'
      followers:
        type: array
        position: 60
        description: Users who follow this project.
        items:
          $ref: '#/definitions/SimpleIdentity'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  ProjectJsonMap:
    type: object
    properties:
      name:
        type: string
        example: My Project
        description: Display name of the project.
      id:
        type: string
        example: My_Project
        description: Project ID.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  ProjectWithPlan:
    type: object
    properties:
      activeCount:
        type: integer
        format: int32
        example: 20
        description: Number of active (not completed) tasks in this project.
      taskCount:
        type: integer
        format: int32
        example: 30
        description: Total number of tasks in this project.
      name:
        type: string
        example: My Project
        description: Display name of the project (Markdown supported).
      id:
        type: string
        example: my_project
        description: Project ID.
      organization:
        description: Organization this project belongs to.
        $ref: '#/definitions/SimpleIdentity'
      rootCount:
        type: integer
        format: int32
        example: 5
        description: Number of root (top-level) tasks in this project.
      nameText:
        type: string
        example: My Project
        description: Project name with Markdown removed.
      nameHtml:
        type: string
        example: My Project
        description: Project name rendered as an HTML fragment converted from Markdown.
      url:
        type: string
        example: https://quire.io/w/my_project
        description: URL of this project on the Quire website.
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      subscription:
        position: 9
        description: Subscription details for this project.
        $ref: '#/definitions/Subscription'
      archivedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this project was archived (peekaboo). Null if not archived.
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this record was last edited.
      attachments:
        type: array
        position: 60
        description: Attachments associated with this project.
        items:
          $ref: '#/definitions/Attachment'
      followers:
        type: array
        position: 60
        description: Users who follow this project.
        items:
          $ref: '#/definitions/SimpleIdentity'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  Recurrence:
    type: object
    properties:
      bydayno:
        type: integer
        format: int32
        example: 25
        description: 'Day number (1-based) used with `monthly` or `yearly` frequencies. Note: `byweekday` and `bydayno` cannot be specified at the same time.'
      freq:
        type: string
        example: weekly
        description: 'Recurrence frequency. One of: `daily`, `weekly`, `monthly`, `yearly`.'
      bymonth:
        type: integer
        format: int32
        example: 10
        description: Month number (1–12) used with `yearly` frequency.
      sincelatest:
        type: boolean
        example: true
        description: 'Whether to repeat relative to the last completion date (daily frequency only). Default: false.'
      interval:
        type: integer
        format: int32
        example: 1
        description: 'Interval between occurrences. For example, `2` with `weekly` means every 2 weeks. Default: 1.'
      dupsubtasks:
        type: boolean
        example: false
        description: 'Whether to duplicate subtasks when the task is completed. Default: true.'
      byweekno:
        type: integer
        format: int32
        example: 2
        description: Week number (1-based) used with `monthly` or `yearly` frequencies.
      byweekday:
        type: array
        example: '[1,3]'
        description: Days of the week to apply the recurrence. Integers where 0=Mon, 1=Tue, …, 6=Sun. For weekly recurrences, provide a list (e.g., `[1]`, `[0,3]`). When provided, these days define when the recurrence occurs.
        items:
          type: integer
          format: int32
      until:
        type: string
        example: '2020-12-22'
        position: 4
        description: End date for the recurrence (UTC, ISO 8601). If not specified, the series never ends.
  RecurrenceX:
    type: object
    properties:
      seriesId:
        type: string
        example: j47xvxul26
        description: Identifier for the recurrence series this task belongs to. Tasks that share the same seriesId are part of the same recurring series.
      bydayno:
        type: integer
        format: int32
        example: 25
        description: 'Day number (1-based) used with `monthly` or `yearly` frequencies. Note: `byweekday` and `bydayno` cannot be specified at the same time.'
      freq:
        type: string
        example: weekly
        description: 'Recurrence frequency. One of: `daily`, `weekly`, `monthly`, `yearly`.'
      bymonth:
        type: integer
        format: int32
        example: 10
        description: Month number (1–12) used with `yearly` frequency.
      sincelatest:
        type: boolean
        example: true
        description: 'Whether to repeat relative to the last completion date (daily frequency only). Default: false.'
      interval:
        type: integer
        format: int32
        example: 1
        description: 'Interval between occurrences. For example, `2` with `weekly` means every 2 weeks. Default: 1.'
      dupsubtasks:
        type: boolean
        example: false
        description: 'Whether to duplicate subtasks when the task is completed. Default: true.'
      byweekno:
        type: integer
        format: int32
        example: 2
        description: Week number (1-based) used with `monthly` or `yearly` frequencies.
      byweekday:
        type: array
        example: '[1,3]'
        description: Days of the week to apply the recurrence. Integers where 0=Mon, 1=Tue, …, 6=Sun. For weekly recurrences, provide a list (e.g., `[1]`, `[0,3]`). When provided, these days define when the recurrence occurs.
        items:
          type: integer
          format: int32
      until:
        type: string
        example: '2020-12-22'
        position: 4
        description: End date for the recurrence (UTC, ISO 8601). If not specified, the series never ends.
  Referrer:
    type: object
    properties:
      task:
        type: string
        example: wrSpgghWFCzPHBqiShSurDeD
        description: OID of the task that references another task (the referrer task).
      user:
        type: string
        example: wrSpgghWFCzPHBqiShSurDeD
        description: OID of the user who created this reference.
      when:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        description: Timestamp (UTC, ISO 8601) when this reference was created.
  SimpleAttachment:
    type: object
    properties:
      name:
        type: string
        example: file.txt
        description: File name of the attachment.
      length:
        type: integer
        format: int32
        example: 20000
        description: Size of the attachment in bytes.
      url:
        type: string
        example: https://quire.io/att/Ta/sdcQOGgeUtyaFFzb9p0IwAgi/qfqVmUtC/image.png
        description: Direct URL to access this attachment.
  SimpleEntityWithId:
    type: object
    properties:
      id:
        type: string
        example: my_id
        description: Identifier for this record.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  SimpleIdentity:
    type: object
    properties:
      id:
        type: string
        example: my_id
        description: Identifier for this record.
      url:
        type: string
        example: https://quire.io/u/my_id
        description: URL of this record on the Quire website.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: Foo
        description: Display name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  SimpleTaggingEntity:
    type: object
    properties:
      color:
        type: string
        example: '35'
        description: 'Color index from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `35`). The palette appears in Quire’s color picker.'
      name:
        type: string
        example: Foo
        description: Display name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  Status:
    type: object
    properties:
      name:
        type: string
        example: Doing
        description: Display name of the status.
      value:
        type: integer
        format: int32
        example: 50
        description: Non-negative integer indicating progress. Must be unique within its context (e.g., project). Values ≥ 100 are treated as completed.
      color:
        type: string
        example: '35'
        description: 'Color index from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `35`).'
  StorageList:
    type: object
    properties:
      myList:
        type: array
        example: '["alpha", "beta", "gamma"]'
        description: List stored under the key `myList`.
        items:
          type: string
      currentProject:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Value stored under the key `currentProject` (e.g., a project OID).
      latest:
        description: Object stored under the key `latest` (key–value map of properties).
        $ref: '#/definitions/StorageMap'
  StorageMap:
    type: object
    properties:
      key:
        type: string
        example: My data
        description: Value stored under the given key.
  Sublist:
    type: object
    properties:
      url:
        type: string
        example: https://quire.io/w/my_project?sublist=Highlight101
        description: URL of this sublist on the Quire website.
      name:
        type: string
        example: Highlight 101
        description: Display name (Markdown supported).
      id:
        type: string
        example: Highlight101
        description: ID.
      nameText:
        type: string
        example: Highlight 101
        description: Name with Markdown removed.
      nameHtml:
        type: string
        example: Highlight 101
        description: Name rendered as an HTML fragment converted from Markdown.
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      partner:
        position: 15
        description: External team this record belongs to. Null if the record is not accessible to external-team members.
        $ref: '#/definitions/SimpleTaggingEntity'
      archivedAt:
        type: string
        example: '2020-02-22T02:06:58.158Z'
        position: 50
        description: Timestamp (UTC, ISO 8601) when this record was archived. Null if not archived.
      start:
        type: string
        example: '2024-01-02'
        position: 50
        description: Target start date for this record, or null if not specified.
      due:
        type: string
        example: '2024-05-25'
        position: 50
        description: Target due date for this record, or null if not specified.
      owner:
        position: 99
        description: Project this sublist belongs to.
        $ref: '#/definitions/SublistOwner'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  SublistOwner:
    type: object
    properties:
      type:
        type: string
        example: Project
        description: Type of the owning object (e.g., Project).
      url:
        type: string
        example: https://quire.io/w/prj_id
        description: URL of this owner on the Quire website.
      id:
        type: string
        example: my_id
        description: Identifier for this record.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: Foo
        description: Display name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  Subscription:
    type: object
    properties:
      due:
        type: string
        example: '2038-02-22T02:06:58Z'
        description: Subscription due/renewal timestamp in UTC (ISO 8601).
      plan:
        type: string
        example: Professional
        description: Plan name (e.g., Free, Professional, Premium, Enterprise).
      expired:
        type: boolean
        example: false
        description: Whether the subscription is expired. Available only when a due date is present.
  Tag:
    type: object
    properties:
      global:
        type: boolean
        example: true
        description: Whether this tag is global (available across projects). May be omitted in responses when false.
      name:
        type: string
        example: Later
        description: Display name of the tag.
      color:
        type: string
        example: '35'
        description: Color index from Quire’s predefined color palette. Two-digit code where the first digit is 0–5 and the second digit is 0–7 (e.g., `35`). The palette is available in Quire’s color picker.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      project:
        position: 99
        description: The project this tag belongs to.
        $ref: '#/definitions/SimpleIdentity'
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  Task:
    type: object
    properties:
      successors:
        type: array
        example: '[''#135'', ''#26'']'
        description: Successor task identifiers.
        items:
          type: string
      tags:
        type: array
        description: Tags applied to this task.
        items:
          $ref: '#/definitions/SimpleTaggingEntity'
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new **logo**
        position: 2
        description: Task name (Markdown supported).
      nameText:
        type: string
        example: Design new logo
        position: 2
        description: Task name with Markdown removed.
      nameHtml:
        type: string
        example: Design new <b>logo</b>
        position: 2
        description: Task name rendered as an HTML fragment converted from Markdown.
      description:
        type: string
        example: This is a *cool* task.
        position: 3
        description: Task description (Markdown supported).
      descriptionText:
        type: string
        example: This is a cool task.
        position: 3
        description: Task description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is a <i>cool</i> task.
        position: 3
        description: Task description rendered as an HTML fragment converted from Markdown.
      recurrence:
        position: 4
        description: Contains the recurrence details of this task. If `null`, the task does not repeat.
        $ref: '#/definitions/RecurrenceX'
      timelogs:
        type: array
        position: 4
        description: The time log entries associated with this task.
        items:
          $ref: '#/definitions/Timelog'
      etc:
        type: integer
        format: int32
        example: 500
        position: 4
        description: The estimated time to complete the task, expressed in seconds. If null, no estimate has been specified.
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: 'Task priority, from -1 (lowest) to 2 (highest). Default: 0.'
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: Task status, from 0 to 100. `100` indicates the task is completed.
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        position: 4
        description: |-
          Start date/time in UTC.
          If a time component is present, milliseconds are set to `001`.
          If date-only, milliseconds are `000` (and hour, minute, second are also zero).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        position: 4
        description: |-
          Due date/time in UTC.
          If a time component is present, milliseconds are set to `001`.
          If date-only, milliseconds are `000` (and hour, minute, second are also zero).
      assignors:
        type: array
        position: 5
        description: A list of users who assigned this task. Each item in assignors corresponds by index to the matching item in assignees (e.g., the first assignee was assigned by the first assignor).
        items:
          $ref: '#/definitions/SimpleIdentity'
      partnerBy:
        position: 5
        description: The user who assigned this task to the external team. If `null`, the task is not associated with any external team.
        $ref: '#/definitions/SimpleIdentity'
      partner:
        position: 5
        description: The external team to which this task belongs. If `null`, this task is not associated with any external team.
        $ref: '#/definitions/SimpleTaggingEntity'
      assignees:
        type: array
        position: 5
        description: Users assigned to this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      order:
        type: integer
        format: int32
        example: 99
        position: 6
        description: Indicates the display order of this task in the board view. A smaller value means the task appears earlier. This field is only relevant in board view and has no meaning elsewhere.
      attachments:
        type: array
        position: 8
        description: The list of files attached to this task.
        items:
          $ref: '#/definitions/Attachment'
      cover:
        type: string
        example: qfqVmUtC
        position: 8
        description: The ID of the attachment used as the cover image for this task.
      childCount:
        type: integer
        format: int32
        example: 5
        position: 10
        description: The number of subtasks belonging to this task. To retrieve the subtasks, send a GET request to "/task/list/{oid}".
      referrers:
        type: array
        position: 20
        description: 'A list of items that reference this task. Note: Some referrers may no longer exist.'
        items:
          $ref: '#/definitions/Referrer'
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Represents the timestamp of the most recent edit to this record.
      toggledAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: The timestamp of the most recent status change for this task.
      toggledBy:
        position: 50
        description: The user who last changed the status of this task.
        $ref: '#/definitions/SimpleIdentity'
      commentedAt:
        type: string
        example: '2023-12-22T09:06:28.253Z'
        position: 50
        description: |-
          Indicates the timestamp of the most recent comment posted on this record.

          If `null`, the record has never had a comment.

          Since comments can be removed, this value may not always match the current set of comments.
      peekaboo:
        type: boolean
        example: true
        position: 50
        description: Whether the task is currently peekabooed (hidden).
      url:
        type: string
        example: https://quire.io/w/my_project/123
        position: 50
        description: URL of this task on the Quire website.
      section:
        type: boolean
        example: true
        position: 50
        description: Whether this task is a section.
      followers:
        type: array
        position: 60
        description: The list of users who are following this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      favorites:
        type: array
        position: 60
        description: The list of users who have marked this task as a favorite.
        items:
          $ref: '#/definitions/SimpleIdentity'
      mutes:
        type: array
        position: 60
        description: The list of users who have muted this task and will not receive notifications about it, even if they are assigned.
        items:
          $ref: '#/definitions/SimpleIdentity'
      sourceRef:
        type: object
        example: '{''text'': ''Source: [Gmail](https://gmail.com/link)''}'
        position: 60
        description: Source reference data stored by an app.
        additionalProperties:
          type: object
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  TaskWithProject:
    type: object
    properties:
      successors:
        type: array
        example: '[''#135'', ''#26'']'
        description: Successor task identifiers.
        items:
          type: string
      tags:
        type: array
        description: Tags applied to this task.
        items:
          $ref: '#/definitions/SimpleTaggingEntity'
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new **logo**
        position: 2
        description: Task name (Markdown supported).
      nameText:
        type: string
        example: Design new logo
        position: 2
        description: Task name with Markdown removed.
      nameHtml:
        type: string
        example: Design new <b>logo</b>
        position: 2
        description: Task name rendered as an HTML fragment converted from Markdown.
      description:
        type: string
        example: This is a *cool* task.
        position: 3
        description: Task description (Markdown supported).
      descriptionText:
        type: string
        example: This is a cool task.
        position: 3
        description: Task description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is a <i>cool</i> task.
        position: 3
        description: Task description rendered as an HTML fragment converted from Markdown.
      recurrence:
        position: 4
        description: Contains the recurrence details of this task. If `null`, the task does not repeat.
        $ref: '#/definitions/RecurrenceX'
      timelogs:
        type: array
        position: 4
        description: The time log entries associated with this task.
        items:
          $ref: '#/definitions/Timelog'
      etc:
        type: integer
        format: int32
        example: 500
        position: 4
        description: The estimated time to complete the task, expressed in seconds. If null, no estimate has been specified.
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: 'Task priority, from -1 (lowest) to 2 (highest). Default: 0.'
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: Task status, from 0 to 100. `100` indicates the task is completed.
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        position: 4
        description: |-
          Start date/time in UTC.
          If a time component is present, milliseconds are set to `001`.
          If date-only, milliseconds are `000` (and hour, minute, second are also zero).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        position: 4
        description: |-
          Due date/time in UTC.
          If a time component is present, milliseconds are set to `001`.
          If date-only, milliseconds are `000` (and hour, minute, second are also zero).
      assignors:
        type: array
        position: 5
        description: A list of users who assigned this task. Each item in assignors corresponds by index to the matching item in assignees (e.g., the first assignee was assigned by the first assignor).
        items:
          $ref: '#/definitions/SimpleIdentity'
      partnerBy:
        position: 5
        description: The user who assigned this task to the external team. If `null`, the task is not associated with any external team.
        $ref: '#/definitions/SimpleIdentity'
      partner:
        position: 5
        description: The external team to which this task belongs. If `null`, this task is not associated with any external team.
        $ref: '#/definitions/SimpleTaggingEntity'
      assignees:
        type: array
        position: 5
        description: Users assigned to this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      order:
        type: integer
        format: int32
        example: 99
        position: 6
        description: Indicates the display order of this task in the board view. A smaller value means the task appears earlier. This field is only relevant in board view and has no meaning elsewhere.
      attachments:
        type: array
        position: 8
        description: The list of files attached to this task.
        items:
          $ref: '#/definitions/Attachment'
      cover:
        type: string
        example: qfqVmUtC
        position: 8
        description: The ID of the attachment used as the cover image for this task.
      project:
        position: 10
        description: The project to which this task belongs.
        $ref: '#/definitions/SimpleEntityWithId'
      childCount:
        type: integer
        format: int32
        example: 5
        position: 10
        description: The number of subtasks belonging to this task. To retrieve the subtasks, send a GET request to "/task/list/{oid}".
      referrers:
        type: array
        position: 20
        description: 'A list of items that reference this task. Note: Some referrers may no longer exist.'
        items:
          $ref: '#/definitions/Referrer'
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: Represents the timestamp of the most recent edit to this record.
      toggledAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: The timestamp of the most recent status change for this task.
      toggledBy:
        position: 50
        description: The user who last changed the status of this task.
        $ref: '#/definitions/SimpleIdentity'
      commentedAt:
        type: string
        example: '2023-12-22T09:06:28.253Z'
        position: 50
        description: |-
          Indicates the timestamp of the most recent comment posted on this record.

          If `null`, the record has never had a comment.

          Since comments can be removed, this value may not always match the current set of comments.
      peekaboo:
        type: boolean
        example: true
        position: 50
        description: Whether the task is currently peekabooed (hidden).
      url:
        type: string
        example: https://quire.io/w/my_project/123
        position: 50
        description: URL of this task on the Quire website.
      section:
        type: boolean
        example: true
        position: 50
        description: Whether this task is a section.
      followers:
        type: array
        position: 60
        description: The list of users who are following this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      favorites:
        type: array
        position: 60
        description: The list of users who have marked this task as a favorite.
        items:
          $ref: '#/definitions/SimpleIdentity'
      mutes:
        type: array
        position: 60
        description: The list of users who have muted this task and will not receive notifications about it, even if they are assigned.
        items:
          $ref: '#/definitions/SimpleIdentity'
      sourceRef:
        type: object
        example: '{''text'': ''Source: [Gmail](https://gmail.com/link)''}'
        position: 60
        description: Source reference data stored by an app.
        additionalProperties:
          type: object
      createdBy:
        position: 99
        description: User who created this record.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: Creation timestamp in UTC (ISO 8601).
  Timelog:
    type: object
    properties:
      start:
        type: string
        example: '2023-02-20T00:00:00.000Z'
        position: 1
        description: Start timestamp (UTC) for this time log.
      end:
        type: string
        example: '2023-02-20T00:05:35.000Z'
        position: 2
        description: End timestamp (UTC) for this time log.
      user:
        position: 3
        description: User who recorded this time log.
        $ref: '#/definitions/SimpleIdentity'
      billable:
        type: boolean
        example: true
        position: 4
        description: Whether this time log is billable. May be omitted in responses when false.
      note:
        type: string
        example: A piece of cake
        position: 5
        description: Optional note for this time log.
  UpdateChatBody:
    type: object
    properties:
      name:
        type: string
        example: Highlight 101
        description: (Optional) New display name for this record.
      id:
        type: string
        example: Highlight101
        description: (Optional) New ID for this record.
      description:
        type: string
        example: '**Great** record to start with.'
        description: (Optional) New description for this record (Markdown supported).
      archived:
        type: boolean
        example: true
        description: (Optional) Archive toggle. Specify true to archive this record; specify false to unarchive.
      iconColor:
        type: string
        example: '37'
        description: (Optional) Icon color index from Quire’s predefined palette.
      start:
        type: string
        example: '2024-01-02'
        description: (Optional) Target start date for this record.
      due:
        type: string
        example: '2024-05-25'
        description: (Optional) Target due date for this record.
      image:
        type: string
        example: icon-view-kanban
        description: |-
          (Optional) Icon image for this record. Must be one of the predefined identifiers:
            'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o',
            'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o',
            'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail',
            'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o',
            'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down',
            'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
  UpdateCommentBody:
    type: object
    properties:
      description:
        type: string
        example: Adjust style
        description: (Optional) New comment content (Markdown supported).
      pinned:
        type: boolean
        example: false
        description: (Optional) Whether the comment is pinned.
  UpdateDocBody:
    type: object
    properties:
      name:
        type: string
        example: Highlight 101
        description: (Optional) New display name for this record.
      id:
        type: string
        example: Highlight101
        description: (Optional) New ID for this record.
      description:
        type: string
        example: '**Great** record to start with.'
        description: (Optional) New description for this record (Markdown supported).
      archived:
        type: boolean
        example: true
        description: (Optional) Archive toggle. Specify true to archive this record; specify false to unarchive.
      iconColor:
        type: string
        example: '37'
        description: (Optional) Icon color index from Quire’s predefined palette.
      start:
        type: string
        example: '2024-01-02'
        description: (Optional) Target start date for this record.
      due:
        type: string
        example: '2024-05-25'
        description: (Optional) Target due date for this record.
      image:
        type: string
        example: icon-view-kanban
        description: |-
          (Optional) Icon image for this record. Must be one of the predefined identifiers:
            'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o',
            'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o',
            'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail',
            'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o',
            'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down',
            'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
  UpdateOrganizationBody:
    type: object
    properties:
      removeFollowers:
        type: array
        description: |-
          (Optional) Followers to remove from this organization (user OIDs).
          See `addFollowers()` for details on special values.
        items:
          type: string
      addFollowers:
        type: array
        description: |-
          (Optional) Followers to add to this organization (user OIDs).
          Special values:
          - "me": the current user follows the organization
          - "app": the application follows (receives notifications)

          App follower syntax:
          - `app|team` or `app|team|channel`
          - `app|/path` → appended to the hook URL when invoking the registered hook.
            Example: hook `https://super.app/hooks/standard` + follower `app|/soc1/33456/a7`
            → `https://super.app/hooks/standard/soc1/33456/a7`
        items:
          type: string
      followers:
        type: array
        description: |-
          (Optional) Followers to replace the current followers of this organization (user OIDs).
          This replaces all existing followers. To modify incrementally, use `addFollowers()` or `removeFollowers()`.
        items:
          type: string
  UpdateProjectBody:
    type: object
    properties:
      removeFollowers:
        type: array
        description: |-
          (Optional) Followers to remove from this project (user OIDs).
          See `getAddFollowers()` for details on special values.
        items:
          type: string
        example:
          - aBuz4MwfZ5CasOae6stnFa2f
      addFollowers:
        type: array
        description: |-
          (Optional) Followers to add to this project (user OIDs).
          Special values:
          - "me": the current user follows the project
          - "app": the application follows (receives notifications)

          App follower syntax:
          - `app|team` or `app|team|channel`
          - `app|/path` → appended to the hook URL when invoking the registered hook.
            Example: hook `https://super.app/hooks/standard` + follower `app|/soc1/33456/a7`
            → `https://super.app/hooks/standard/soc1/33456/a7`
        items:
          type: string
        example:
          - sfsvLbDVPvi1QMf2GkDn7VSy
      followers:
        type: array
        description: |-
          (Optional) Followers to replace the current followers of this project (user OIDs).
          This replaces all existing followers. To modify incrementally, use `getAddFollowers()` or `getRemoveFollowers()`.
        items:
          type: string
        example:
          - tzufRLqCnud74dARyDSvjWDl
          - app
  UpdateStatusBody:
    type: object
    properties:
      name:
        type: string
        example: Later
        description: (Optional) New display name for the status.
      value:
        type: integer
        format: int32
        example: 50
        description: (Optional) New numeric status value. Non-negative integer indicating progress. Must be unique within the context (e.g., project). Values ≥ 100 are treated as completed.
      color:
        type: string
        example: '35'
        description: '(Optional) Status color index from Quire’s predefined palette (two digits: first 0–5, second 0–7; e.g., `35`).'
  UpdateSublistBody:
    type: object
    properties:
      changes:
        type: array
        description: (Optional) List of changes that add or remove tasks from this sublist. See `Change` for the operation schema.
        items:
          $ref: '#/definitions/Change'
      name:
        type: string
        example: Highlight 101
        description: (Optional) New display name for this record.
      id:
        type: string
        example: Highlight101
        description: (Optional) New ID for this record.
      description:
        type: string
        example: '**Great** record to start with.'
        description: (Optional) New description for this record (Markdown supported).
      archived:
        type: boolean
        example: true
        description: (Optional) Archive toggle. Specify true to archive this record; specify false to unarchive.
      iconColor:
        type: string
        example: '37'
        description: (Optional) Icon color index from Quire’s predefined palette.
      start:
        type: string
        example: '2024-01-02'
        description: (Optional) Target start date for this record.
      due:
        type: string
        example: '2024-05-25'
        description: (Optional) Target due date for this record.
      image:
        type: string
        example: icon-view-kanban
        description: |-
          (Optional) Icon image for this record. Must be one of the predefined identifiers:
            'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o',
            'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o',
            'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail',
            'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o',
            'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down',
            'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
  UpdateTagBody:
    type: object
    properties:
      name:
        type: string
        example: Later
        description: (Optional) New display name for the tag.
      global:
        type: boolean
        example: true
        description: (Optional) Whether the tag is global (available across projects). If set to false, you must also provide `project`.
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: (Optional) Project OID that this tag is limited to. Used only when `global` is explicitly set to false; ignored otherwise.
      color:
        type: string
        example: '35'
        description: (Optional) Tag color (palette index or hex, depending on your client).
  UpdateTaskBody:
    type: object
    properties:
      name:
        type: string
        example: New idea
        description: (Optional) New task name.
      description:
        type: string
        example: This is a **cool** task.
        description: (Optional) New task description.
      peekaboo:
        type: object
        example: true
        description: |-
          (Optional) Peekaboo setting.

          - `true`: Hide indefinitely (task and subtasks).
          - Positive integer: Number of days to hide.
          - `false`: Undo previous peekaboo.

          Default: false.
        anyOf:
          - type: boolean
          - type: integer
      yourField:
        type: object
        description: |-
          (Optional) Value for a custom field. Type depends on field definition.

          - Money: numeric value only (no currency).
          - User/Task: OID.
          - Duration: number of seconds.
          - Multi-value: provide a list.
      assignees:
        type: array
        description: |-
          (Optional) Assignees to replace the current assignees (OID, ID, or email).
          This replaces all existing assignees. To modify incrementally, use `addAssignees` or `removeAssignees`.

          See `addAssignees` for special values.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      recurrence:
        description: |-
          (Optional) Recurrence details. `null` if the task is not recurring.

          - `freq`: `daily`, `weekly`, `monthly`, `yearly`.
          - `interval`: Interval between occurrences. Default: 1.
          - `until`: End date. Default: never ends.
          - `bymonth`: Month (1 = January). Supported only with `yearly`. Default: 1.
          - `byweekno`: Week number (starting from 1) or `last`. Supported with `monthly`/`yearly`.
          - `byweekday`: Day(s) of week (0 = Monday ... 6 = Sunday). For weekly, use a list (e.g., `[1]`, `[0,3]`).
          - `bydayno`: Day of month (1 = first day). Supported with `monthly`/`yearly`.
            Note: `byweekday` and `bydayno` cannot both be specified.
          - `dupsubtasks`: Duplicate subtasks when the task is completed. Default: true.
          - `sincelatest`: Daily only. Repeat based on the last completion date. Default: false.
        $ref: '#/definitions/Recurrence'
      successors:
        type: array
        description: |-
          (Optional) Successors to replace the current successors (task OID or ID).

          IDs can be specified as `#id` or `id`.

          Examples: `'AMZ0-59R125-35KTK2356G'`, `'#13'`, `135`.
        items:
          type: string
      removeFollowers:
        type: array
        description: |-
          (Optional) Followers to remove (OID, ID, or email).

          See `addFollowers` for details on special values.
        items:
          type: string
        example:
          - aBuz4MwfZ5CasOae6stnFa2f
      addFollowers:
        type: array
        description: |-
          (Optional) Followers to add (OID, ID, or email).
          Special values:
          - "me": the current user
          - "inherit": include followers of the parent task
          - "app": the application follows (receives notifications)

          App follower syntax:
          - `app|team` or `app|team|channel`
          - `app|/path` → appended to the hook URL (e.g., `.../standard/soc1/33456/a7`).
        items:
          type: string
        example:
          - sfsvLbDVPvi1QMf2GkDn7VSy
      followers:
        type: array
        description: |-
          (Optional) Followers to replace the current followers (OID, ID, or email).

          See `addFollowers` for details.
        items:
          type: string
        example:
          - tzufRLqCnud74dARyDSvjWDl
          - app
      removeSuccessors:
        type: array
        description: |-
          (Optional) Successors to remove (task OID or ID).

          IDs can be specified as `#id` or `id`.

          Examples: `'AMZ0-59R125-35KTK2356G'`, `'#13'`, `135`.
        items:
          type: string
      addAssignees:
        type: array
        description: |-
          (Optional) Assignees to add (OID, ID, or email).
          Special values:
          - "me": the current user
          - "inherit": include all assignees of the parent task

          Example: `{"addAssignees": ["me", "inherit", "foo@domain.com"]}`
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      removeAssignees:
        type: array
        description: |-
          (Optional) Assignees to remove (OID, ID, or email).

          See `addAssignees` for details on special values.
        items:
          type: string
        example:
          - Job4NSW9xK6Owcke8iKj7zyH
      addSuccessors:
        type: array
        description: |-
          (Optional) Successors to add (task OID or ID).

          IDs can be specified as `#id` or `id`.

          Examples: `'AMZ0-59R125-35KTK2356G'`, `'#13'`, `135`.
        items:
          type: string
      removeTags:
        type: array
        description: |-
          (Optional) Tags to remove from this task (OID or name).
          Tag names are case-insensitive.
        items:
          type: string
        example:
          - mPAQrYU1qt8wAYAInKRlTnvl
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        description: |-
          (Optional) Start date/time in UTC.

          - With time: `yyyy-MM-dd'T'HH:mmZ` (e.g., `2020-10-30T09:30Z`).
          - Date only: `yyyy-MM-dd` (e.g., `2020-10-30`).

          Notes:
          - Seconds are not supported.
          - `2020-10-30T00:00:00` is treated as `2020-10-30` (date only).
          - To specify exactly midnight UTC, use `2020-10-30T00:00` (no seconds).
      section:
        type: boolean
        example: true
        description: '(Optional) Whether this task is a section. Default: false.'
      asUser:
        type: boolean
        example: true
        description: |-
          (Optional) If true, marks this update as performed by the app.
          Default: false (updated by the authorizing user).
      addTags:
        type: array
        description: |-
          (Optional) Tags to add to this task (OID or name).
          Tag names are case-insensitive.
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        description: |-
          (Optional) Due date/time in UTC.

          - With time: `yyyy-MM-dd'T'HH:mmZ` (e.g., `2020-10-30T09:30Z`).
          - Date only: `yyyy-MM-dd` (e.g., `2020-10-30`).

          Notes:
          - Seconds are not supported.
          - `2020-10-30T00:00:00` is treated as `2020-10-30` (date only).
          - To specify exactly midnight UTC, use `2020-10-30T00:00` (no seconds).
      tags:
        type: array
        description: |-
          (Optional) Tags to replace the current tags on this task (OID or name).
          This replaces all existing tags. To modify incrementally, use `addTags` or `removeTags`.
          Tag names are case-insensitive.
        items:
          type: string
        example:
          - ITaVbkhh3iVcEcV3vuSLeE2k
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: (Optional) New priority. Must be between -1 (lowest) and 2 (highest).
      status:
        type: integer
        format: int32
        example: 100
        position: 4
        description: (Optional) New status, between 0 and 100. Specify 100 to complete the task.
      etc:
        type: integer
        format: int32
        example: 0
        position: 4
        description: |-
          (Optional) Estimated time to complete, in seconds. Must be non-negative or `null`.
          Specify `null` to clear the value.
      sourceRef:
        type: object
        example: '{''text'': ''Source: [Gmail](https://gmail.com/link)''}'
        position: 60
        description: |-
          (Optional) Arbitrary source reference data to store with the task. Available via API on retrieval.

          If the map contains `text`, its value will be displayed client-side and should be Markdown. Including a source link is recommended.
        additionalProperties:
          type: object
  User:
    type: object
    properties:
      name:
        type: string
        example: John
        description: Display name of the user (Markdown supported).
      id:
        type: string
        example: john
        description: User ID.
      nameText:
        type: string
        example: John
        description: User name with Markdown removed.
      nameHtml:
        type: string
        example: John
        description: User name rendered as an HTML fragment converted from Markdown.
      url:
        type: string
        example: https://quire.io/u/john
        description: URL of this user on the Quire website.
      email:
        type: string
        example: john@gmail.com
        description: Email address.
        allowEmptyValue: true
      website:
        type: string
        example: https://coolwebsites.com
        description: Website URL.
        allowEmptyValue: true
      description:
        type: string
        example: This is *cool*!
        description: Description (Markdown supported).
      descriptionText:
        type: string
        example: This is cool!
        description: Description with Markdown removed.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description rendered as an HTML fragment converted from Markdown.
      iconColor:
        type: string
        example: '37'
        description: 'Color index for the icon from Quire’s predefined palette. Two-digit code: first digit 0–5, second digit 0–7 (e.g., `37`).'
      image:
        type: string
        example: https://quire.s3.amazonaws.com/oid/image.jpg
        description: Image URL representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Object identifier (OID), a UUID-like unique string.
  Recurring:
    properties:
      byweekday:
        example:
          - 1
          - 4
