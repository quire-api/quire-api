swagger: '2.0'
info:
  description: "# Introduction\nWelcome to the reference for the Quire REST API!\n\nThe Quire REST API provides a broad set of operations and resources that:\n\n  * Consistently do repetitive or tedious tasks.\n  * Chain a process together for your team’s process and workflow.\n    * Pull information from other locations such as email and <a href=\"https://evernote.com/\" target=\"_blank\">Evernote</a> into Quire.\n    * Push information from Quire to other locations such as email and <a href=\"https://zapier.com/\" target=\"_blank\">Zapier</a>. \n\nWant to share your thoughts on how Quire API works for you? <a href=\"/feedback\">Tell us how you feel </a>about using our API and what we can do to make it better.\n\n> <a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a> is a web-service protocol for rapid development by using HTTP and JSON technology.\n\n# API Changelog\n\nYou can find the <a href=\"https://github.com/quire-api/quire-api/blob/master/CHANGES.md\" target=\"_blank\">Changelog</a> of the API Reference in the Quire Community.\n\n# Authentication\n\n## OAuth v2.0\n\nQuire uses <a href=\"https://tools.ietf.org/html/rfc6749\">OAuth v2.0</a> to authenticate your app to access the Quire REST API on behalf of users without getting their password.\n\nAuthenticating via OAuth2 requires the following steps:\n\n1. Register Your Application on Quire\n2. Ask a Quire User to Grant Access to Your Application\n3. Retrieve an Access Token\n4. Make Authenticated Requests\n\n### Register Your Application on Quire\n\n![Quire API](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/openAPI.png)\n\n**1. Give your app a cool name**\n\nYour app deserves a cool name that lives up to its wide broad of great features. \n\nAll of the app users will see this name in public, so think carefully!\n\n**2. Choose the Quire Organization that your app belongs to**\n\nYou can choose an organization in Quire that your app belongs to.\n\nIf one day you decide to leave the organization, you will lose the authority to manage the app. \n\n**3. Redirect URL**\n\nWhen users grant your app authorization request, users will be directed to the configured URL that you’ve set. \n\n**4. Choose permission scopes** \n\nYou can set permission on what your app can do with Quire. There are several options for you to choose from. \n\n*Note: If none of the options is selected, the app can only read user’s data.*\n \n**5. Development Client ID and Client Secret**\n\n![Quire Open API](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/client-id-client-secret.png)\n\nThe Client ID and Client secret will be automatically generated as you create an app. \n\nThe Client ID is a unique ID to identify your app.\n\nYou should keep your client secret safe, which means you should never share your client secret with anyone. If you choose to regenerate the client secret, the old one will immediately become invalid. \n\n**6. Update your App**\n\nIf your app hasn’t been published to Quire App Directory, it will remain as unpublished status. You can still use the configured shareable link in the Developer App Console Distribution to share the app with other users for testing or integration. \n\nWhen you make changes to the app, you can use the shareable link to access the development copy as well. Working on your development copy will not affect your live App Directory app. When your updated app is ready to be published and replaced the old version on Quire App Directory, your published app will have a different Client ID to the unpublished one.\n\nThere are two sets of Client ID and Client Secret. \n\n * `Development set` - should be used during developing and testing internally of the app. \n * `Production set` - should be used once your app is ready and published on Quire App Directory.\n\n## Fulfill Authorization Request\n\n### Ask a Quire User to Grant Access to Your Application\n\nOnce registering your application, you can ask your user to grant access to your application.\n\nThe authorization endpoint lets users grant your app access to the requested permissions. \n\nThe authorization endpoint should look like this:\n\n`https://quire.io/oauth?client_id=your-client-ID&redirect_uri=your-redirect-uri`\n\n![Quire Grant Access](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/Quire-API-Authorization.png)\n\nAfter your user clicks `Allow`, the access will be granted, and he will be redirected to the URL you specified in the `redirect_uri` parameter with an authorization code provided as a query parameter called `code`.\n\nAfter your app is granted, you can have an authorization code to exchange access token for access Quire API. The `redirect_uri` is optional. If not being specified, we will automatically use the one that is previously detected in the app. If specified, the redirect URL must start with the prefix of the one that was previously detected in the app.\n\n\n### Retrieve Access Token\nTo retrieve the access token, you have to post a request to `https://quire.io/oauth/token` with the following data:\n\n| Parameter | Value |\n| --- | --- |\n| grant\\_type | authorization\\_code |\n| code | {your-authorization-code} |\n| client\\_id | {your-client-ID} |\n| client\\_secret | {your-client-secret} |\n\nThen, the access token will be returned in the response's body.\n\n```json\n{\n  \"access_token\":\"ACCESS_TOKEN\",\n  \"token_type\": \"bearer\",\n  \"expires_in\":2592000,\n  \"refresh_token\":\"REFRESH_TOKEN\"\n}\n```\nThe token should be kept carefully and permanently since you need it to access every Quire API.\n\n### Use Access Token to Access Quire API\n\nIn each request, the access token must be put in the header. The header name is `Authorization` and the value is `Bearer your_token`.\n\nAfter you exchange the access token, your app can make requests to Quire API on behalf of the authorized users.\n\n```bash\ncurl -H 'Authorization: Bearer {access_token}' \\\nhttps://quire.io/api/user/id/me\n```\n```json\n{\n  \"email\": \"john@gmail.cc\",\n  \"website\": \"https://coolwebsites.com\",\n  \"id\": \"My_ID\",\n  \"description\": \"This is *cool*!\",\n  \"url\": \"https://quire.io/u/My_ID\",\n  \"nameText\": \"My Name\",\n  \"nameHtml\": \"My Name\",\n  \"descriptionText\": \"This is cool!\",\n  \"descriptionHtml\": \"This is <i>cool</i>!\",\n  \"image\": \"https://quire.s3.amazonaws.com/oid/image.jpg\",\n  \"iconColor\": \"37\",\n  \"name\": \"My Name\",\n  \"oid\": \"Dyh2YkFcu9uLgLFIeN1kB4Ld\"\n}\n```\n### Token Expiration\n\nA refresh token might stop working for one of these reasons:\n\n* The user has revoked your app's access.\n* The refresh token has not been used for 6 months.\n\n# Publish App\n\n![Quire Publish App](https://d12y7sg0iam4lc.cloudfront.net/s/img/tutorial/Quire-API-Publish-App.png)\n\nBy default, your app will be set as Private. You can change the app distribution to Public so that other Quire users can install your app to their workspace as well.\n\nIf your app is made available on Quire App Directory and you want to delete the app, you should communicate with your users first before depreciating the app.\n\n# WebHook\n\nWhen one event on Quire is triggered, the system will send a payload to the webhook's configured URL.\n\n> A webhook is used by Quire to call an app, while Quire API is used by an app to call Quire.\n\n## Notifications\n\nA notification is the information about a update (aka., an activity). Here is an example:\n\n```\n{\n  \"type\": \"notification\",\n  \"token\": \"a-token-defined-by-you\",\n  \"data\": {\n    \"type\": 0, //activity's type\n    \"when\": \"2019-09-30T08:20:12.000Z\",\n    \"what\": {\n      \"oid\": \"YxjapXXRCOYxoaiCT4tT3OQm\", //OID of a task, project, or organization depending on type\n      \"id\": 101,\n      \"name\": \"Brand new start\"\n    },\n    \"user\": {\n      \"oid\": \"1AbDEFed2A5031BEDDweqmde\", //OID of the user\n      \"id\": \"john.doer\",\n      \"name\": \"John Doer\"\n    },\n    \"message\": \"<a href=\\\"https://quire.io/u/john.doer\\\">John Doer</a> added <a href=\\\"https://quire.io/w/MyProjects/101\\\">Brand new start</a>\",\n    \"text\": \"John Doer added Brand new start\",\n    \"url\": \"https://quire.io/w/MyProjects/101\"\n  } \n}\n```\n\n> There is an optional field called `value` in the map of the `data` field. It carries the detailed information in a map instance. For example, it carries the assignee's ID, name and URL if it is an assignment.\n> Also, if the notification is about *start* or *due*, there will be another field called `due` in the map of the `data` field. It is the date time formatted in user's locale and time zone.\n\n## Registration for notifications\n\nIf the app wants to receive notifications of a specific projects or tasks, it can *follow* the projects or apps by sending a `PUT` request to the URL. To add a follower, the body of the request can be:\n\n```\n{\n  \"addFollowers\": [\"app\"]\n}\n```\n\nWhere `app` is a keyword. It indicates that the app would like to add to its followers.\n\nIn additions, you can specify additional information that will be passed as part of a notification int the following syntaxes.\n\n**Syntax 1**\n\n```\n\"app|team|channel\"\n```\n\nwhere `app` is a keyword while `team` and `channel` are application specific. That is, you can pass any value to `team` and `channel`. For example,\n\n```\n{\n  \"addFollowers\": [\"app|extra101\"]\n}\n```\n\nThen, the notification will carry additional field called `team` with the value `\"extra101\"`:\n\n```\n{\n  \"type\": \"notification\"\n  \"team\": \"extra101\"\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\n**Syntax 2**\n\n```\n\"app|/path\"\n```\n\nwhere `app` is a keyword, and `/path` is application specific. The path will be appended to the app's hook URL. For example, assume the app's hook URL is `\"https://super.app/hooks/standard\"`, and the follower \"app|/soc/id279/channel51\". Then, the notification will be posted the following URL: `\"https://super.app/hooks/standard/soc/id279/channel51\"`.\n\nIf you'd like to pass additional information in this syntax, you can append it as follows.\n\n```\n\"app|/path|channel\"\n```\n\nFor example, `app|/soc/id8|box51`. Then, `box51` will be part of the JON object sent to the hook URL.\n\n```\n{\n  \"type\": \"notification\"\n  \"channel\": \"box51\"\n  \"data\": {\n    //refer the Notifications section for details\n  }\n}\n```\n\n# Rate limits\n\nTo protect the stability of the API and keep it available to all users, Quire enforces multiple kinds of rate limiting. \nRequests that hit any of our rate limits will receive a `429 Too Many Requests` response.\nWe may change these quotas or add new quotas in the future.\n\n| Plan | Maximum requests per organization, per *minute* | Maximum requests per organization, per *hour*\n|---------|------|-------\n| Free | 25  | 250\n\n> Note: the limit is per-organization. It sums up the total number of all accesses from all applications for each organization.\n\n## Size limits\n\nThe size of each request can't be larger than 2MB. Requests that hit this limit will receive a `413 Payload too large` response.\n\n# Status codes\n\n| Code | Meaning               | Description                                               \n|------|-----------------------|--------------------------------------------------------------------------\n| 200  | Success               | Request successful\n| 400  | Bad Request           | You're using a wrong parameter, or passing incorrect data.\n| 401  | Unauthorized          | Invalid or expired token.\n| 403  | Forbidden             | Not authorized to access the resource.\n| 404  | Not Found             | The specified resource could not be found.\n| 405  | Method not Allowed    | Method not allowed or supported.\n| 409  | Conflict              | There is already a resource with the same criteria.\n| 429  | Too Many Requests     | Exceeded the [rate limit](#section/Rate-limits) for API calls\n| 500  | Internal Server Error | There is an unexpected error.\n| 503  | Service Unavailable   | Server is down for maintenance.\n\n## Error responses\n\nThe following JSON data is returned in the response body when an error occurs.\n\n```json\n{\n\t\"code\": a_number,\n  \"message\": \"an error message here\"\n}\n```\n\n| Error Code | Meaning\n|-----|-----------------------\n| 100 | General authentication error.\n| 400 | Bad request including wrong request body, wrong parameter and so on.\n| 401 | Invalid or expired token.\n| 403 | Forbidden.\n| 404 | Resource not found.\n| 405 | Method not allowed.\n| 413 | Request too large.\n| 429 | Too many invocations.\n| 469 | Quota exceeded, such as number of projects and number of members.\n| 500 | General invocation error. Most likely, an internal error.\n"
  version: 1.0.0
  title: Quire API
  termsOfService: 'https://quire.io/terms'
  contact:
    name: Quire
    url: 'https://quire.io'
    email: info@quire.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  x-logo:
    url: 'https://quire.io/b820/s/img/website/quire_logo.svg'
host: quire.io
basePath: /api
tags:
  - name: comment
    description: A comment that an user can put to a task or project.
  - name: organization
    description: An organization is a group of projects where members collaborate at once.
  - name: partner
    description: >-
      An external team (aka., a parnter) is a group of users that can access
      only tasks that are assigned to this team.
  - name: project
    description: >-
      A project represents a prioritized list of tasks in Quire. It exists in a
      single organization and is accessible to a subset of users in that
      organization, depending on its permissions.
  - name: status
    description: A status is a value to indicate the progress of a task.
  - name: storage
    description: >-
      A storage to store application specifica data, or to map a user's name in
      a third-party application, such as Slack, to a Quire user.
  - name: sublist
    description: A sublist is a collections of tasks. It represents a subset of all tasks.
  - name: tag
    description: A tag is a label that can be attached to any task in Quire.
  - name: task
    description: >-
      The task is a piece of work to be done or undertaken. It is the basic
      object that you and your team can collaborate on.
  - name: user
    description: >-
      A user object represents an account in Quire that can be given access to
      various organizations, projects, and tasks.
schemes:
  - https
paths:
  '/comment/id/{projectId}':
    post:
      tags:
        - comment
      summary: Add a new comment to a project.
      description: Add a new comment to a project.
      operationId: createCommentToProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that new comment will be added to
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  '/comment/id/{projectId}/{oid}':
    get:
      tags:
        - comment
      summary: Get a comment with project's ID
      description: Returns the full comment record of the given OID.
      operationId: getCommentById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the comment is in.
          required: true
          type: string
        - name: oid
          in: path
          description: OID of comment that needs to be feteched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    put:
      tags:
        - comment
      summary: Update an existing comment with project's ID
      description: >-
        Updates an existing comment, and returns the complete updated comment
        record.
      operationId: updateCommentById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the comment is in.
          required: true
          type: string
        - name: oid
          in: path
          description: OID of the comment that needs to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: The new content of the comment to update to
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    delete:
      tags:
        - comment
      summary: Delete an existing comment with project's ID
      description: Delete an existing comment.
      operationId: deleteCommentById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the comment is in.
          required: true
          type: string
        - name: oid
          in: path
          description: OID of comment that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/comment/id/{projectId}/{taskId}':
    post:
      tags:
        - comment
      summary: Add a new comment to a task.
      description: Add a new comment to a task.
      operationId: createCommentToTask
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the task is in
          required: true
          type: string
        - name: taskId
          in: path
          description: ID of the task that new comment will be added to
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  '/comment/list/id/{projectId}':
    get:
      tags:
        - comment
      summary: Get all comments of the given project.
      description: Returns all comment records of the given project by its ID.
      operationId: getProjectComments
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  '/comment/list/id/{projectId}/{taskId}':
    get:
      tags:
        - comment
      summary: 'Get all comments of the given task. '
      description: Returns all comment records of the given task by its ID.
      operationId: getTaskComments
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project.
          required: true
          type: string
        - name: taskId
          in: path
          description: ID of the task
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  '/comment/list/{oid}':
    get:
      tags:
        - comment
      summary: Get comments added to the given object.
      description: >-
        Returns all comment records of the given object that can be a project or
        a task.
      operationId: getComments
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project or task that comments will be be fetched from.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
  '/comment/{oid}':
    post:
      tags:
        - comment
      summary: Add a new comment to a task or a project.
      description: >-
        Add a new comment to a task or a project. If the given OID is a project,
        the comment will be added to a project. If a task, the comment will be
        added to a task.
      operationId: createComment
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the project or task that new comment will be added to
          required: true
          type: string
        - in: body
          name: body
          description: Comment to create
          required: true
          schema:
            $ref: '#/definitions/CreateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
  '/comment/{projectOid}/{oid}':
    get:
      tags:
        - comment
      summary: Get a comment with project's OID
      description: Returns the full comment record of the given OID.
      operationId: getCommentByOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project that the comment is in.
          required: true
          type: string
        - name: oid
          in: path
          description: OID of comment that needs to be feteched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    put:
      tags:
        - comment
      summary: Update an existing comment with project's OID
      description: >-
        Updates an existing comment, and returns the complete updated comment
        record.
      operationId: updateCommentByOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project that the comment is in.
          required: true
          type: string
        - name: oid
          in: path
          description: OID of the comment that needs to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: The new content of the comment to update to
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Comment'
    delete:
      tags:
        - comment
      summary: Delete an existing comment with project's OID
      description: Delete an existing comment.
      operationId: deleteCommentByOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project that the comment is in.
          required: true
          type: string
        - name: oid
          in: path
          description: OID of comment that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/organization/id/{id}':
    get:
      tags:
        - organization
      summary: Get an organization by its ID.
      description: Returns the complete organization record of the given OID.
      operationId: getOrganizationById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  /organization/list:
    get:
      tags:
        - organization
      summary: Get all organizations.
      description: >-
        Returns the organization records for all organizations that the current
        user can grant to this application.
      operationId: getOrganizations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
  '/organization/{oid}':
    get:
      tags:
        - organization
      summary: Get an organization by its OID.
      description: returns the complete organization record.
      operationId: getOrganization
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of organization that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Organization'
  '/partner/list/id/{projectId}':
    get:
      tags:
        - partner
      summary: Get all external teams of the given project by its ID.
      description: Returns all external team records of the given project by its ID.
      operationId: getPartnersByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project to look for
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Partner'
  '/partner/list/{projectOid}':
    get:
      tags:
        - partner
      summary: Get all external teams of the given project by its OID.
      description: Returns all external team records of the given project by its OID.
      operationId: getPartnersByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project to look for
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Partner'
  '/partner/{oid}':
    get:
      tags:
        - partner
      summary: 'Get an external team (aka., a partner).'
      description: Returns the full external team record of the given OID.
      operationId: getPartner
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of external team that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Partner'
  '/project/id/{id}':
    get:
      tags:
        - project
      summary: Get a project by its ID.
      description: Returns the complete project record of the given ID.
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  /project/list:
    get:
      tags:
        - project
      summary: Get all granted projects.
      description: >-
        Returns the project records for all projects that the current user can
        grant to this application.
      operationId: getProjects
      produces:
        - application/json
      parameters:
        - name: archived
          in: query
          description: |-
            Whether to return archived projects.
            By default, archived projects won't be returned.
            If the parameter is specified without value, `true` is assumed.
          required: false
          type: boolean
          x-example: archived=true
        - name: add-task
          in: query
          description: >-
            Whether to return only projects that you can add tasks to. Default:
            `false`.

            If the parameter is specified without value, `true` is assumed.
          required: false
          type: boolean
          x-example: add-task=true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/project/list/id/{organizationId}':
    get:
      tags:
        - project
      summary: Get all granted projects of the organization by its ID.
      description: >-
        Returns all project records of the given organization. Only granted
        projects will be returned.
      operationId: getProjectsByOrganizationId
      produces:
        - application/json
      parameters:
        - name: organizationId
          in: path
          description: ID of the organization
          required: true
          type: string
        - name: archived
          in: query
          description: |-
            Whether to return archived projects.
            By default, archived projects won't be returned.
            If the parameter is specified without value, `true` is assumed.
          required: false
          type: boolean
          x-example: archived=true
        - name: add-task
          in: query
          description: >-
            Whether to return only projects that you can add tasks to. Default:
            `false`.

            If the parameter is specified without value, `true` is assumed.
          required: false
          type: boolean
          x-example: add-task=true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/project/list/{organizationOid}':
    get:
      tags:
        - project
      summary: Get all granted projects of the organization by its OID.
      description: >-
        Returns all project records of the given organization. Only granted
        projects will be returned.
      operationId: getProjectsByOrganizationOid
      produces:
        - application/json
      parameters:
        - name: organizationOid
          in: path
          description: OID of the organization.
          required: true
          type: string
        - name: archived
          in: query
          description: |-
            Whether to return archived projects.
            By default, archived projects won't be returned.
            If the parameter is specified without value, `true` is assumed.
          required: false
          type: boolean
          x-example: archived=true
        - name: add-task
          in: query
          description: >-
            Whether to return only projects that you can add tasks to. Default:
            `false`.

            If the parameter is specified without value, `true` is assumed.
          required: false
          type: boolean
          x-example: add-task=true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/project/{oid}':
    get:
      tags:
        - project
      summary: Get a project by its OID.
      description: Returns the complete project record of the given OID.
      operationId: getProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
    put:
      tags:
        - project
      summary: Update a project.
      description: >-
        Updates an existing project, and returns the complete updated project
        record.
      operationId: updateProject
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of project that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Project to update
          required: true
          schema:
            $ref: '#/definitions/UpdateProjectBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
  '/status/id/{projectId}':
    post:
      tags:
        - status
      summary: Add a new status.
      description: Add a new status into a project.
      operationId: createStatusToProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project that this new status to be added to.
          required: true
          type: string
        - in: body
          name: body
          description: Status to create
          required: true
          schema:
            $ref: '#/definitions/CreateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
  '/status/id/{projectId}/{value}':
    get:
      tags:
        - status
      summary: Get the status of the given value.
      description: Returns the full status record of the given value.
      operationId: getStatusByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project that the status belongs to.
          required: true
          type: string
        - name: value
          in: path
          description: The status's value that needs to be fetched.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    put:
      tags:
        - status
      summary: Update a status.
      description: 'Updates an existing status, and returns the complete updated record.'
      operationId: updateStatusByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project that the status belongs to.
          required: true
          type: string
        - name: value
          in: path
          description: The status's value that needs to be updated.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Status to update
          required: true
          schema:
            $ref: '#/definitions/UpdateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    delete:
      tags:
        - status
      summary: Delete a status
      description: Delete an existing status.
      operationId: deleteStatusByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project that the status belongs to.
          required: true
          type: string
        - name: value
          in: path
          description: The status's value that needs to be deleted.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: ok
  '/status/list/id/{projectId}':
    get:
      tags:
        - status
      summary: Get all statuses of the given project by its ID.
      description: Returns all status records of the given project by its ID.
      operationId: getStatusesByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
  '/status/list/{projectOid}':
    get:
      tags:
        - status
      summary: Get all statuses of the given project by its OID.
      description: Returns all status records of the given project by its OID.
      operationId: getStatusesByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
  '/status/{projectOid}':
    post:
      tags:
        - status
      summary: Add a new status.
      description: Add a new status into a project.
      operationId: createStatus
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that this new status to be added to.
          required: true
          type: string
        - in: body
          name: body
          description: Status to create
          required: true
          schema:
            $ref: '#/definitions/CreateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
  '/status/{projectOid}/{value}':
    get:
      tags:
        - status
      summary: Get the status of the given value.
      description: Returns the full status record of the given value.
      operationId: getStatusByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that the status belongs to.
          required: true
          type: string
        - name: value
          in: path
          description: The status's value that needs to be fetched.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    put:
      tags:
        - status
      summary: Update a status.
      description: 'Updates an existing status, and returns the complete updated record.'
      operationId: updateStatusByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that the status belongs to.
          required: true
          type: string
        - name: value
          in: path
          description: The status's value that needs to be updated.
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Status to update
          required: true
          schema:
            $ref: '#/definitions/UpdateStatusBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Status'
    delete:
      tags:
        - status
      summary: Delete a status
      description: Delete an existing status.
      operationId: deleteStatusByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that the status belongs to.
          required: true
          type: string
        - name: value
          in: path
          description: The status's value that needs to be deleted.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: ok
  '/storage/list/{prefix}':
    get:
      tags:
        - storage
      summary: Get all stored values with the given prefix.
      description: |-
        Returns all stored values that start with the given prefix.
        Note: at most 20 items are returned for each query.
      operationId: getValues
      produces:
        - application/json
      parameters:
        - name: prefix
          in: path
          description: |-
            A prefix (optional).
            Example: "foo".If not specified, all values are returned.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Storage'
  '/storage/user/{name}':
    get:
      tags:
        - storage
      summary: Get the user of the given name in a third-party application.
      description: >-
        Returns the user of the given name in a third-party application, or null
        if not found.
      operationId: getUserValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: |-
            The user's name in a third-party application.
            Example: "John at Slack"
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SimpleIdentity'
    put:
      tags:
        - storage
      summary: Maps a name to the current user.
      description: >-
        Maps a name to the current user. The name can be anything, but it is
        usually the current user's name in a third-party application.

        It is useful if you'd like to retrieve a user from a name in a
        third-party application.
      operationId: updateUserMapping
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: |-
            The name.
            Example: "John at Slack"
          required: true
          type: string
      responses:
        '200':
          description: ok
    delete:
      tags:
        - storage
      summary: Delete the user mapping of the given name
      description: >-
        Delete the user mapping of the given name.

        It returns true if the mapping is deleted successfully, or false if the
        mapping doesn't exist.
      operationId: deleteUserMapping
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: |-
            The name.
            Example: "latest"
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/storage/{name}':
    get:
      tags:
        - storage
      summary: Get the value of the given name.
      description: 'Returns the value of the given name, or null if not found.'
      operationId: getValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: |-
            The name.
            Example: "latest"
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/StorageMap'
    put:
      tags:
        - storage
      summary: Update the value of the given name.
      description: >-
        Updates the value of the given name. If it doesn't exist, it adds the
        name to the given value.

        If the value is null, it is the same as deletion.

        It returns true if the value is updated or added successfully.
      operationId: updateValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: |-
            The name.
            Example: "latest"
          required: true
          type: string
        - in: body
          name: body
          description: >-
            The value to store. It can be any object that can be stored as a
            JSON object
          required: true
          schema:
            $ref: '#/definitions/StorageMap'
      responses:
        '200':
          description: ok
    delete:
      tags:
        - storage
      summary: Delete the value of the given name
      description: >-
        Delete the value of the given name.

        It returns true if the value is deleted successfully, or false if the
        name doesn't exist.
      operationId: deleteValue
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: |-
            The name.
            Example: "latest"
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/sublist/id/{projectId}':
    post:
      tags:
        - sublist
      summary: Add a new sublist.
      description: Add a new sublist into a project.
      operationId: createSublistToProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project that this new sublist to be added to.
          required: true
          type: string
        - in: body
          name: body
          description: Sublist to create
          required: true
          schema:
            $ref: '#/definitions/CreateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
  '/sublist/id/{projectId}/{id}':
    get:
      tags:
        - sublist
      summary: Get an existing sublist by its ID.
      description: Returns the full sublist record of the given ID.
      operationId: getSublistById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the sublist belongs to.
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: ID of the sublist that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    put:
      tags:
        - sublist
      summary: Update a sublist by its ID.
      description: 'Updates an existing sublist, and returns the complete updated record.'
      operationId: updateSublist
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the sublist belongs to.
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: ID of the sublist that needs to be fetched
          required: true
          type: string
        - in: body
          name: body
          description: Sublist to update
          required: true
          schema:
            $ref: '#/definitions/UpdateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    delete:
      tags:
        - sublist
      summary: Delete a sublist by its ID
      description: Delete an existing sublist of the given OID.
      operationId: deleteSublist
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of the project that the sublist belongs to.
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: ID of the sublist that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/sublist/list/id/{projectId}':
    get:
      tags:
        - sublist
      summary: Get all sublists of the given project by its ID.
      description: Returns all sublist records of the given project by its ID.
      operationId: getSublistsByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: ID of project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Sublist'
  '/sublist/list/{projectOid}':
    get:
      tags:
        - sublist
      summary: Get all sublists of the given project by its OID.
      description: Returns all sublist records of the given project by its OID.
      operationId: getSublistsByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of the project.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Sublist'
  '/sublist/{oid}':
    get:
      tags:
        - sublist
      summary: Get an existing sublist by its OID
      description: Returns the full sublist record of the given OID.
      operationId: getSublist
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of sublist that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    put:
      tags:
        - sublist
      summary: Update a sublist.
      description: 'Updates an existing sublist, and returns the complete updated record.'
      operationId: updateSublist
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of sublist that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Sublist to update
          required: true
          schema:
            $ref: '#/definitions/UpdateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
    delete:
      tags:
        - sublist
      summary: Delete a sublist
      description: Delete an existing sublist of the given OID.
      operationId: deleteSublist
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of sublist that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/sublist/{projectOid}':
    post:
      tags:
        - sublist
      summary: Add a new sublist.
      description: Add a new sublist into a project.
      operationId: createSublist
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: OID of project that this new sublist to be added to.
          required: true
          type: string
        - in: body
          name: body
          description: Sublist to create
          required: true
          schema:
            $ref: '#/definitions/CreateSublistBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Sublist'
  '/tag/id/{projectId}':
    post:
      tags:
        - tag
      summary: Add a new tag.
      description: Add a new tag into a project.
      operationId: createTagToProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of project that this new tag to be added to. Specify "-" if you'd
            like to add it to the personal tasks that belong to no specific
            projects in My Tasks.
          required: true
          type: string
        - in: body
          name: body
          description: Tag to create
          required: true
          schema:
            $ref: '#/definitions/CreateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
  '/tag/list/id/{projectId}':
    get:
      tags:
        - tag
      summary: Get all tags of the given project by its ID.
      description: Returns all tag records of the given project by its ID.
      operationId: getTagsByProjectId
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of project. Specify "-" if you'd like to retrieve tags from the
            personal tasks that belong to no specific projects in My Tasks.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  '/tag/list/{projectOid}':
    get:
      tags:
        - tag
      summary: Get all tags of the given project by its OID.
      description: Returns all tag records of the given project by its OID.
      operationId: getTagsByProjectOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: >-
            OID of the project. Specify "-" if you'd like to retrieve tags from
            the personal tasks that belong to no specific projects in My Tasks.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  '/tag/{oid}':
    get:
      tags:
        - tag
      summary: Get a tag.
      description: Returns the full tag record of the given OID.
      operationId: getTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of tag that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    put:
      tags:
        - tag
      summary: Update a tag.
      description: 'Updates an existing tag, and returns the complete updated record.'
      operationId: updateTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of tag that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Tag to update
          required: true
          schema:
            $ref: '#/definitions/UpdateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    delete:
      tags:
        - tag
      summary: Delete a tag
      description: Delete an existing tag of the given OID.
      operationId: deleteTag
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of tag that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/tag/{projectOid}':
    post:
      tags:
        - tag
      summary: Add a new tag.
      description: Add a new tag into a project.
      operationId: createTag
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: >-
            OID of project that this new tag to be added to. Specify "-" if
            you'd like to add it to the personal tasks that belong to no
            specific projects in My Tasks.
          required: true
          type: string
        - in: body
          name: body
          description: Tag to create
          required: true
          schema:
            $ref: '#/definitions/CreateTagBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
  '/task/after/{oid}':
    post:
      tags:
        - task
      summary: Add a new task after the given task.
      description: Add a new task after the given task.
      operationId: createTaskAfter
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: 'OID of the task that this new task to be added after. '
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/before/{oid}':
    post:
      tags:
        - task
      summary: Add a new task before the given task.
      description: Add a new task before the given task.
      operationId: createTaskBefore
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the task that this new task to be added before.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/id/{projectId}':
    post:
      tags:
        - task
      summary: Add a new task.
      description: Add a new task into a project.
      operationId: createTaskByProject
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of project that this new task to be added to. The new task will
            be added as a root task. Specify "-" if you'd like to add it to the
            personal tasks that belong to no specific projects in My Tasks.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/id/{projectId}/{id}':
    get:
      tags:
        - task
      summary: Get an existing task by its ID.
      description: Returns the full task record for a single task.
      operationId: getTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of the project that the task belongs to.

            Specify "-" if you'd like to retrieve the personal tasks that belong
            to no specific projects in My Tasks.
          required: true
          type: string
        - name: id
          in: path
          description: ID of the task that needs to be fetched
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - task
      summary: Update an existing task by its ID.
      description: 'Updates an existing task, and returns the full updated record.'
      operationId: updateTaskById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of the project that the task belongs to.

            Specify "-" if you'd like to update the personal tasks that belong
            to no specific projects in My Tasks.
          required: true
          type: string
        - name: id
          in: path
          description: ID of the task that needs to be updated
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: The new content of the task to update to.
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
  '/task/list/id/{projectId}':
    get:
      tags:
        - task
      summary: Get all root tasks of the given project.
      description: Returns all root task records of the given project.
      operationId: getRootTasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of project.

            Specify "-" if you'd like to retrieve the personal tasks that belong
            to no specific projects in My Tasks.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/task/list/id/{projectId}/{taskId}':
    get:
      tags:
        - task
      summary: Get all subtasks of the given task.
      description: >-
        Returns all subtask records of the given task.

        Note: tasks in the same level are return. That is, it won't returns
        subtasks of subtasks. You have to retrieve them recursively.
      operationId: getSubtasks
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of the project.

            Specify "-" if you'd like to retrieve the personal tasks that belong
            to no specific projects in My Tasks
          required: true
          type: string
        - name: taskId
          in: path
          description: ID of the parent task.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/task/list/{oid}':
    get:
      tags:
        - task
      summary: >-
        Get all root tasks of the given project or all subtasks of the given
        task.
      description: >-
        Returns all root task records of the given project or all subtasks of
        the given task by OID. If the given OID is a project, the root tasks are
        returned. If the given OID is a task, its subtasks are returned.

        Note: tasks in the same level are return. That is, it won't returns
        subtasks of subtasks. You have to retrieve them recursively.
      operationId: getTasksByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: >-
            OID of project or parent task to look for.

            Specify "-" if you'd like to retrieve the personal tasks that belong
            to no specific projects in My Tasks.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/task/search/id/{projectId}':
    get:
      tags:
        - task
      summary: Searches tasks in the given project.
      description: >-
        Returns task records that match the specified criteria in the given
        project.


        Note: it returns at most 50 records, and recent edited first.
      operationId: searchTasksById
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: >-
            ID of the project to search for the tasks.

            Specify "-" if you'd like to search for the personal tasks that
            belong to no specific projects in My Tasks.
          required: true
          type: string
        - name: text
          in: query
          description: >-
            Text to do a full-text search against the name, description, and
            attachments.

            Note: it doesn't include the content and attachment of comments.

            Also note: the update of tasks can take 10 seconds or more before it
            can be found by the full-text search.
          required: false
          type: string
          x-example: text=important major
        - name: name
          in: query
          description: >-
            Task name to match with.

            To specify a regular expression, you can precede it with `~`.

            To specify a case-insensitive regular expression, you can precede it
            with `~*`.

            For example, `name=~abc` matches if `abc` is part of the name.
            `name=~^ab.*ed$` matches if the name starts with `ab` and ends with
            `ed`.

            To do a full-text search, please use `text` instead.
          required: false
          type: string
          x-example: name=My first task
        - name: description
          in: query
          description: >-
            Task's description to match with.

            To specify a regular expression, you can precede it with `~`.

            To specify a case-insensitive regular expression, you can precede it
            with `~*`.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: sublist
          in: query
          description: ID or OID of task's sublist to match with.
          required: false
          type: string
          x-example: sublist=Top
        - name: status
          in: query
          description: |-
            Task's status to match with.
            You can specify a value between 0 and 100.
          required: false
          type: string
          x-example: status=100
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleTask'
  '/task/search/{projectOid}':
    get:
      tags:
        - task
      summary: Searches tasks in the given project.
      description: >-
        Returns task records that match the specified criteria in the given
        project.


        Note: it returns at most 50 records, and recent edited first.
      operationId: searchTasksByOid
      produces:
        - application/json
      parameters:
        - name: projectOid
          in: path
          description: >-
            OID of the project to search for the tasks.

            Specify "-" if you'd like to search the personal tasks that belong
            to no specific projects in My Tasks.
          required: true
          type: string
        - name: text
          in: query
          description: >-
            Text to do a full-text search against the name, description, and
            attachments.

            Note: it doesn't include the content and attachment of comments.
          required: false
          type: string
          x-example: text=important major
        - name: name
          in: query
          description: >-
            Task name to match with.

            To specify a regular expression, you can precede it with `~`.

            To specify a case-insensitive regular expression, you can precede it
            with `~*`.

            To do a full-text search, please use `text` instead.
          required: false
          type: string
          x-example: name=My first task
        - name: description
          in: query
          description: >-
            Task's description to match with.

            To specify a regular expression, you can precede it with `~`.

            To specify a case-insensitive regular expression, you can precede it
            with `~*`.
          required: false
          type: string
          x-example: description=~john@gooodjob.com
        - name: sublist
          in: query
          description: ID or OID of task's sublist to match with.
          required: false
          type: string
          x-example: sublist=Top
        - name: status
          in: query
          description: >-
            Task's status to match with.

            You can specify a value between 0 and 100, or "active" for active
            tasks, "completed" for completed tasks.
          required: false
          type: string
          x-example: status=100
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleTask'
  '/task/{oid}':
    get:
      tags:
        - task
      summary: Get an existing task by its OID.
      description: Returns the full task record for a single task.
      operationId: getTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of the task that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    post:
      tags:
        - task
      summary: Add a new task.
      description: Add a new task into a project or a task.
      operationId: createTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: >-
            OID of project or task that this new task to be added to. If the
            given OID is a project, the new task will be added as a root task.
            If the given OID is a task, the new task will become its subtask.
            Specify "-" if you'd like to add it to the personal tasks that
            belong to no specific projects in My Tasks.
          required: true
          type: string
        - in: body
          name: body
          description: Task to create
          required: true
          schema:
            $ref: '#/definitions/CreateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - task
      summary: Update an existing task by its OID.
      description: 'Updates an existing task, and returns the full updated record.'
      operationId: updateTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of task that needs to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: The new content of the task to update to.
          required: true
          schema:
            $ref: '#/definitions/UpdateTaskBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
        - task
      summary: Delete a task and all of its subtasks.
      description: Delete an existing task and all of its subtasks.
      operationId: deleteTask
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of task that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/user/id/{id}':
    get:
      tags:
        - user
      summary: Get a user by its ID or email address.
      description: Returns the full user record of the given ID or email address.
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: |-
            ID, email address or "me" of user that needs to be fetched.
            Example: "john@gmail.com","me"
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
  /user/list:
    get:
      tags:
        - user
      summary: Get all user records.
      description: >-
        Returns all colleagues of the current user if he granted the app to
        access his contacts. Otherwise, it returns only colleagues who also
        authorized the same app.

        If the current user didn't grant the access of his contacts and none of
        his collegues authorized this app, only the current user's record will
        be returned.

        The first record must be the current user. 
      operationId: getUsers
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/user/list/project/id/{projectId}':
    get:
      tags:
        - user
      summary: Get all users records of the given project.
      description: >-
        Returns all members of the given project of the specified ID.

        If the current user doesn't grant the app to access his contacts, only
        basic information are returned.

        The first record must be the current user. 
      operationId: getUsersOfProjectByOid
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/user/list/project/{oid}':
    get:
      tags:
        - user
      summary: Get all users records of the given project.
      description: >-
        Returns all members of the given project of the specified OID.

        If the current user doesn't grant the app to access his contacts, only
        basic information are returned.

        The first record must be the current user. 
      operationId: getUsersOfProjectById
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/user/{oid}':
    get:
      tags:
        - user
      summary: Get a user by its OID.
      description: Returns the full user record of the given OID.
      operationId: getUserByOid
      produces:
        - application/json
      parameters:
        - name: oid
          in: path
          description: OID of user that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2:
    type: oauth2
    authorizationUrl: 'https://quire.io/oauth'
    tokenUrl: 'https://quire.io/oauth/token'
    flow: accessCode
definitions:
  Attachment:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/att/Ta/sdcQOGgeUtyaFFzb9p0IwAgi/qfqVmUtC/image.png'
        description: URL of this attachment.
      length:
        type: integer
        format: int32
        example: 2048
        description: 'The size of this attachment. Unit: bytes.'
      name:
        type: string
        example: file.zip
        description: Attachment's name.
      type:
        type: integer
        format: int32
        example: 2048
        description: >-
          The type of this attachment.It is 1 if it is from Google Drive. It is
          2 if it is stored in Quire.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  Change:
    type: object
    required:
      - task
    properties:
      single:
        type: boolean
        example: false
        description: >-
          Whether to include or exclude only the task.

          Default: false -- all descendants tasks will be included or excluded
          too.

          Note: it won't affect descendants that are explicitly excluded or
          included before this invocation.
      exclude:
        type: boolean
        example: false
        description: |-
          Whether to exclude the task.
          Default: false (include).
      task:
        type: string
        example: 2MmYOpJH_ZLeehIjjytH1Rwr
        description: The task's OID to be included or excluded.
  Comment:
    type: object
    properties:
      oid:
        type: string
        example: iDsPd.QP_qM.hN.Trymukn8b
        description: 'OID, aka. UUID.'
      description:
        type: string
        example: It is *cool*!
        position: 1
        description: The content.
      descriptionText:
        type: string
        example: It is cool!
        position: 1
        description: The content but excluding markdown characters.
      descriptionHtml:
        type: string
        example: It is <i>cool</i>!
        position: 1
        description: The content in a form of a HTML fragment converted from markdown.
      attachments:
        type: array
        position: 8
        description: The attachments of this task.
        items:
          $ref: '#/definitions/Attachment'
      url:
        type: string
        position: 50
        description: Url of this comment on Quire website.
      pinBy:
        position: 50
        description: 'The user who pinned this comment, or null if not pinned.'
        $ref: '#/definitions/SimpleIdentity'
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: 'When this comment was edited, or null if not edited.'
      pinAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: 'When this comment was pinned, or null if not pinned.'
      editedBy:
        position: 50
        description: 'The user who edited this comment, or null if not edited.'
        $ref: '#/definitions/SimpleIdentity'
      owner:
        position: 99
        description: The object this comment was added to.
        $ref: '#/definitions/CommentOwner'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  CommentOwner:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/u/my_id'
        description: Url of this record on Quire website.
      type:
        type: string
        example: Project
        description: The type of this object.
      name:
        type: string
        example: Foo
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
  CreateCommentBody:
    type: object
    required:
      - description
    properties:
      pinned:
        type: boolean
        example: false
        description: '(Optional) Whether to pin this comment. Default: false'
      description:
        type: string
        example: Adjust style
        description: The content of the new comment.
      asUser:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true if you'd like to make this new comment as
          created by the app.

          Default: false -- the comment is marked as created by the user
          authorizing the app.
  CreateStatusBody:
    type: object
    required:
      - name
      - value
    properties:
      color:
        type: string
        example: '35'
        description: >-
          (Optional) The color of the status.If not omitted, a color will be
          generated automatially.
      name:
        type: string
        example: Doing
        description: The name of the status
      value:
        type: integer
        format: int32
        example: 'true'
        description: >-
          The value. It is a non-negative value to indicate the progress. The
          value must be unique. If it is great or equals to 100, it means the
          task has been completed.
  CreateSublistBody:
    type: object
    required:
      - name
    properties:
      tasks:
        type: array
        description: |-
          (Optional) A list of tasks' OID that belong to this sublist.
          Note: all of descendants will be included too.
        items:
          type: string
      description:
        type: string
        example: '**Great** sublist to start with.'
        description: (Optional) An optional description about this task.
      name:
        type: string
        example: Sublist 101
        description: The name of the sublist.
      id:
        type: string
        example: Sublist101
        description: >-
          (Optional) ID of the sublist. If omitted, Quire will generate one
          automatically. It must be unquie in the whole project if specified
      iconColor:
        type: string
        example: '37'
        description: >-
          (Optional) The color of the icon representing this record. It is an
          index of our predefined color palette. 
      image:
        type: string
        example: icon-view-kanban
        description: >-
          (Optional) The image representing this record. It shall be one of the
          predined images:
           'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o', 'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o', 'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail', 'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o', 'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down', 'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
      personal:
        type: boolean
        position: 15
        description: '(Optional) Whether it is personal. If omitted, false is assumed.'
      partner:
        type: string
        example: rcBHBYXZSiyDRrHrWPutatfF
        position: 15
        description: (Optional) OID of the external team that this sublist belongs to.
      due:
        type: string
        example: '2020-01-22T02:06:58.158Z'
        position: 50
        description: '(Optional) When this sublist was aimed to complete. '
  CreateTagBody:
    type: object
    required:
      - name
    properties:
      global:
        type: boolean
        example: true
        description: '(Optional) Whether this tag is global. If omitted, it is not glboal.'
      color:
        type: string
        example: '35'
        description: >-
          (Optional) The color of the tag.If not omitted, a color will be
          generated automatially.
      name:
        type: string
        example: Later
        description: The name of the tag
  CreateTaskBody:
    type: object
    required:
      - name
    properties:
      description:
        type: string
        example: This is a *cool* task.
        description: (Optional) An optional description about this task.
      assignees:
        type: array
        description: >-
          (Optional) OID, ID or emails of the users that this task is assigned
          to.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        description: >-
          (Optional) An optional start time. If you'd like to specify time, use
          `yyyy-mm-ddThh:mmZ`, e.g., `2020-10-30T09:30Z`.

          If you don't like to set time, use `yyyy-mm-dd`, e.g.,
          `2020-10-30`.Note: they must be in UTC time.
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        description: >-
          (Optional) An optional due time. If you'd like to specify time, use
          `yyyy-mm-ddThh:mmZ`, e.g., `2020-10-30T09:30Z`.

          If you don't like to set time, use `yyyy-mm-dd`, e.g.,
          `2020-10-30`.Note: they must be in UTC time.
      recurring:
        description: >-
          (Optional) The recurring information of this task. It is null if it is
          not a recurring task.
        $ref: '#/definitions/Recurring'
      peekaboo:
        type: object
        example: true
        description: >-
          (Optional) Specify true or a positive integer to peekaboo this task
          and its subtasks, if any.Or, specify false to undo the previous
          peekaboo if any.

          If a positive integer is specified, it is the number of days to
          peekaboo a task. If true, the default number of days will be used
          (depending on 

          the project's setting).

          Default: false.
        anyOf:
          - type: boolean
          - type: integer
      asUser:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true if you'd like to make this new task as created
          by the app.

          Default: false -- the task is marked as created by the user
          authorizing the app.
      followers:
        type: array
        description: >-
          (Optional) OID, ID or emails of users who follow this task.If "me" is
          specified, it means the current user will follow this task.

          If the application would like to follow (i.e., receive notifications),
          it can pass "app" as one of OIDs.

          In additions, it can pass additional information in one of the
          following syntaxes.


          Syntax 1:

          "app|team" or "app|team|channel"

          where team and channel can be any value.


          Syntax 2:

          "app|/path"

          where "/path" can be any URL path. It will be appended to the hook's
          URL when calling the registered hook. For example, if the hook URL is
          "https://super.app/hooks/standard" and the follower is
          "app|/soc1/33456/a7", then the notification will be sent to
          "https://super.app/hooks/standard/soc1/33456/a7".
        items:
          type: string
        example:
          - tzufRLqCnud74dARyDSvjWDl
      name:
        type: string
        example: Design new **logo**
        description: The name of the task.
      tags:
        type: array
        description: >-
          (Optional) OID or names of the tags to be added to the new created
          task.

          Note: if tag's name is specified, it is case-insensitive.
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optional) An optional status. Its value must be between 0 and 100.
          Default: 0.
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optional) An optional priority. Its value must be between -1 (lowest)
          and 2 (highest). Default: 0.
  Organization:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/c/my_organization'
        description: Url of this record on Quire website.
      email:
        type: string
        example: info@compony.com
        description: Email address.
        allowEmptyValue: true
      name:
        type: string
        example: My Organization
        description: Name.
      id:
        type: string
        example: my_organization
        description: ID.
      nameText:
        type: string
        example: My Organization
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: My Organization
        description: Name in a form of a HTML fragment converted from markdown.
      website:
        type: string
        example: 'https://coolwebsites.com'
        description: Website.
        allowEmptyValue: true
      description:
        type: string
        example: This is *cool*!
        description: Description.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  Partner:
    type: object
    properties:
      name:
        type: string
        example: UI design team
        description: The name.
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        position: 2
      project:
        position: 99
        description: The project this object belongs to.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  Project:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/w/my_project'
        description: Url of this record on Quire website.
      organization:
        description: The organization this project belongs to.
        $ref: '#/definitions/SimpleIdentity'
      rootCount:
        type: integer
        format: int32
        example: 5
        description: Number of root tasks in this project.
      name:
        type: string
        example: My Project
        description: Name.
      id:
        type: string
        example: my_project
        description: ID.
      activeCount:
        type: integer
        format: int32
        example: 20
        description: Number of active tasks in this project.
      taskCount:
        type: integer
        format: int32
        example: 30
        description: Total number of tasks in this project.
      nameText:
        type: string
        example: My Project
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: My Project
        description: Name in a form of a HTML fragment converted from markdown.
      description:
        type: string
        example: This is *cool*!
        description: Description.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      archivedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: >-
          When this project was archived (aka., peekaboo). It is null if not
          archived.
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this record was edited last time.
      followers:
        type: array
        position: 60
        description: Users who follow this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      attachments:
        type: array
        position: 60
        description: The attachments of this task.
        items:
          $ref: '#/definitions/Attachment'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  Recurring:
    type: object
    properties:
      data:
        type: integer
        format: int32
        example: 6
        description: >-
          It depends on the type of this recurring. If weekly, bit 0 is Sunday,
          bit 1 is Monday and so on. For example, if the data is 6, it means
          every Monday and Tuesday.
      type:
        type: integer
        format: int32
        example: 2048
        description: >-
          The type of this recurring.It is 0 if it is weekly. It is 1 if it is
          monthly. It is 2 if it is yearly. It is 3 if it is custom. 
      rate:
        type: integer
        format: int32
        example: 2048
        description: >-
          How often this recurring shall occur. If the rate is 2 and the type is
          weekly, it means it shall occur every two week. If the type is custom,
          it means number of days to repeat.
      end:
        type: string
        example: '2020-12-22T00:00:00.000Z'
        position: 4
        description: >-
          When this recurring shall end. If not specified, it means it is never
          end.
  Referrer:
    type: object
    properties:
      user:
        type: string
        example: wrSpgghWFCzPHBqiShSurDeD
        description: OID of the user who made this reference.
      when:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        description: When this reference is made.
      task:
        type: string
        example: wrSpgghWFCzPHBqiShSurDeD
        description: OID of the task that refers another task.
  SimpleIdentity:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/u/my_id'
        description: Url of this record on Quire website.
      id:
        type: string
        example: my_id
        description: ID.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: Foo
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
  SimpleTaggingEntity:
    type: object
    properties:
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      name:
        type: string
        example: Foo
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
  SimpleTask:
    type: object
    properties:
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new **logo**
        position: 2
        description: This task's name.
      nameText:
        type: string
        example: Design new logo
        position: 2
        description: This task's name but excluding markdown characters.
      nameHtml:
        type: string
        example: Design new <b>logo</b>
        position: 2
        description: This task's name in a form of a HTML fragment converted from markdown.
      description:
        type: string
        example: This is a *cool* task.
        position: 3
        description: Description about this task.
      descriptionText:
        type: string
        example: This is a cool task.
        position: 3
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is a <i>cool</i> task.
        position: 3
        description: Description in a form of a HTML fragment converted from markdown.
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status of this task. Its value must be between 0 and 100. If 100,
          it means completed.
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        position: 4
        description: >-
          When to start this task.Note: if time is specified, the millisecond
          will be `001`. Otherwise, it is `000` (so are the hour, minute and
          second fields).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        position: 4
        description: >-
          When to complete this task. Note: if time is specified, the
          millisecond will be 001. Otherwise, it is 000 (so are the hour, minute
          and second fields).
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The priority of this task. Its value must be between -1 (lowest) and 2
          (highest). Default: 0.
      assignees:
        type: array
        position: 5
        description: Users who are assigned to this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      tags:
        type: array
        position: 5
        description: Tags that are tagged to this task.
        items:
          $ref: '#/definitions/SimpleTaggingEntity'
      url:
        type: string
        example: 'https://quire.io/w/my_project/123'
        position: 50
        description: Url of this task on Quire website.
      peekaboo:
        type: boolean
        example: true
        position: 50
        description: Whether this task was peekabooed. It is null if not peekabooed.
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  Status:
    type: object
    properties:
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      name:
        type: string
        example: Doing
        description: The name.
      value:
        type: integer
        format: int32
        example: 50
        description: >-
          The value. It is a non-negative value to indicate the progress. The
          value must be unique. If it is great or equals to 100, it means the
          task has been completed.
  Storage:
    type: object
    properties:
      currentProject:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: Property name
      latest:
        description: Property name.
        $ref: '#/definitions/StorageMap'
      myList:
        type: array
        description: Property name.
        items:
          type: string
  StorageMap:
    type: object
    properties:
      myKey:
        type: string
        example: My data
        description: Property name
  Sublist:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/w/my_project?sublist=Sublist101'
        description: Url of this record on Quire website.
      name:
        type: string
        example: Sublist 101
        description: Name.
      id:
        type: string
        example: Sublist101
        description: ID.
      nameText:
        type: string
        example: Sublist 101
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: Sublist 101
        description: Name in a form of a HTML fragment converted from markdown.
      description:
        type: string
        example: This is *cool*!
        description: Description.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      partner:
        position: 15
        description: >-
          The external team that this sublist belongs to. It is null if this
          sublist can't be accessed by a member of external teams.
        $ref: '#/definitions/SimpleTaggingEntity'
      due:
        type: string
        example: '2020-01-22T02:06:58.158Z'
        position: 50
        description: 'When this sublist was aimed to complete, or null if not specified.'
      archivedAt:
        type: string
        example: '2020-02-22T02:06:58.158Z'
        position: 50
        description: When this sublist was archived. It is null if not archived.
      owner:
        position: 99
        description: The project this sublist belongs to.
        $ref: '#/definitions/SublistOwner'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  SublistOwner:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/u/my_id'
        description: Url of this record on Quire website.
      type:
        type: string
        example: Project
        description: The type of this object.
      id:
        type: string
        example: my_id
        description: ID.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      name:
        type: string
        example: Foo
        description: Name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
  Tag:
    type: object
    properties:
      global:
        type: boolean
        example: true
        description: >-
          Whether this is a global tag. Note: it won't be returned if this is
          not a global tag.
      color:
        type: string
        example: '35'
        description: >-
          The color. It is an index of our predefined color palette. The first
          digit is between 0 and 5, and the second between 0 and 7. The color
          palette can be found in our Quire's color picker.
      name:
        type: string
        example: Later
        description: The name.
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      project:
        position: 99
        description: The project this object belongs to.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  Task:
    type: object
    properties:
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
      id:
        type: integer
        format: int32
        example: 12
        position: 1
      name:
        type: string
        example: Design new **logo**
        position: 2
        description: This task's name.
      nameText:
        type: string
        example: Design new logo
        position: 2
        description: This task's name but excluding markdown characters.
      nameHtml:
        type: string
        example: Design new <b>logo</b>
        position: 2
        description: This task's name in a form of a HTML fragment converted from markdown.
      description:
        type: string
        example: This is a *cool* task.
        position: 3
        description: Description about this task.
      descriptionText:
        type: string
        example: This is a cool task.
        position: 3
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is a <i>cool</i> task.
        position: 3
        description: Description in a form of a HTML fragment converted from markdown.
      recurring:
        position: 4
        description: >-
          The recurring information of this task. It is null if it is not a
          recurring task.
        $ref: '#/definitions/Recurring'
      status:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The status of this task. Its value must be between 0 and 100. If 100,
          it means completed.
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        position: 4
        description: >-
          When to start this task.Note: if time is specified, the millisecond
          will be `001`. Otherwise, it is `000` (so are the hour, minute and
          second fields).
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        position: 4
        description: >-
          When to complete this task. Note: if time is specified, the
          millisecond will be 001. Otherwise, it is 000 (so are the hour, minute
          and second fields).
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          The priority of this task. Its value must be between -1 (lowest) and 2
          (highest). Default: 0.
      partner:
        position: 5
        description: >-
          The external team that this task belongs to. It is null if this task
          doesn't belong to any external team.
        $ref: '#/definitions/SimpleTaggingEntity'
      partnerBy:
        position: 5
        description: >-
          The user who assigned this task to an external team. It is null if
          this task doesn't belong to any external team.
        $ref: '#/definitions/SimpleIdentity'
      assignors:
        type: array
        position: 5
        description: >-
          Users who have assigned this tasks to a user. For example, the first
          item of assignees is assigned by the first item of assignors.
        items:
          $ref: '#/definitions/SimpleIdentity'
      assignees:
        type: array
        position: 5
        description: Users who are assigned to this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      tags:
        type: array
        position: 5
        description: Tags that are tagged to this task.
        items:
          $ref: '#/definitions/SimpleTaggingEntity'
      order:
        type: integer
        format: int32
        example: 99
        position: 6
        description: >-
          The order of this task shown on the board view. The smaller the number
          is, the ealier the task is shown. It is meaningless if not in a board
          view.
      attachments:
        type: array
        position: 8
        description: The attachments of this task.
        items:
          $ref: '#/definitions/Attachment'
      cover:
        type: string
        example: qfqVmUtC
        position: 8
        description: The id of the attachment that is used as a cover of this task.
      childCount:
        type: integer
        format: int32
        example: 5
        position: 10
        description: >-
          Number of subtasks of this task. To retrieve these subtasks, make the
          GET request to "/task/list/{oid}".
      referrers:
        type: array
        position: 20
        description: >-
          A list of referrers that refer this task. Note: some of them might no
          longer exist.
        items:
          $ref: '#/definitions/Referrer'
      toggledAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this task's status was changed last time.
      toggledBy:
        position: 50
        description: The user who changed this task's status.
        $ref: '#/definitions/SimpleIdentity'
      editedAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 50
        description: When this record was edited last time.
      url:
        type: string
        example: 'https://quire.io/w/my_project/123'
        position: 50
        description: Url of this task on Quire website.
      peekaboo:
        type: boolean
        example: true
        position: 50
        description: Whether this task was peekabooed. It is null if not peekabooed.
      followers:
        type: array
        position: 60
        description: Users who follow this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      mutes:
        type: array
        position: 60
        description: >-
          Users who don't want any nofications of this task even they're
          assinged to it.
        items:
          $ref: '#/definitions/SimpleIdentity'
      favorites:
        type: array
        position: 60
        description: Users who favorite this task.
        items:
          $ref: '#/definitions/SimpleIdentity'
      project:
        position: 99
        description: The project this task belongs to.
        $ref: '#/definitions/SimpleIdentity'
      createdAt:
        type: string
        example: '2018-12-22T02:06:58.158Z'
        position: 99
        description: When this record was created.
      createdBy:
        position: 99
        description: The user who created this record.
        $ref: '#/definitions/SimpleIdentity'
  UpdateCommentBody:
    type: object
    properties:
      pinned:
        type: boolean
        example: false
        description: (Optional) Whether to pin this comment.
      description:
        type: string
        example: Adjust style
        description: (Optional) The new content of the comment.
  UpdateProjectBody:
    type: object
    properties:
      followers:
        type: array
        description: |-
          (Optional) OID of the users to replace the followers of this project.
          Please refer to `addFollowers()` for more details.
        items:
          type: string
        example:
          - tzufRLqCnud74dARyDSvjWDl
          - app
      addFollowers:
        type: array
        description: >-
          (Optional) OID of the followers to be added to this project.If "me" is
          specified, it means the current user will follow this task.

          If the application would like to follow (i.e., receive notifications),
          it can pass "app" as one of OIDs.

          In additions, it can pass additional information in one of the
          following syntaxes.


          Syntax 1:

          "app|team" or "app|team|channel"

          where team and channel can be any value.


          Syntax 2:

          "app|/path"

          where "/path" can be any URL path. It will be appended to the hook's
          URL when calling the registered hook. For example, if the hook URL is
          "https://super.app/hooks/standard" and the follower is
          "app|/soc1/33456/a7", then the notification will be sent to
          "https://super.app/hooks/standard/soc1/33456/a7".
        items:
          type: string
        example:
          - sfsvLbDVPvi1QMf2GkDn7VSy
      removeFollowers:
        type: array
        description: |-
          (Optional) OID of the followers to be removed from this project.
          Please refer to `addFollowers()` for more details.
        items:
          type: string
        example:
          - aBuz4MwfZ5CasOae6stnFa2f
  UpdateStatusBody:
    type: object
    properties:
      color:
        type: string
        example: '35'
        description: (Optional) The color of the status.
      name:
        type: string
        example: Later
        description: (Optional) The new name of the status.
      value:
        type: integer
        format: int32
        example: 'true'
        description: >-
          (Optional) The new value of the status. It is a non-negative value to
          indicate the progress. The value must be unique. If it is great or
          equals to 100, it means the task has been completed.
  UpdateSublistBody:
    type: object
    properties:
      description:
        type: string
        example: '**Great** sublist to start with.'
        description: (Optional) An optional description about this task.
      changes:
        type: array
        description: >-
          (Optional) A list of changes to control what tasks to be added to or
          removed from this sublist.
        items:
          $ref: '#/definitions/Change'
      archived:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true to archive this sublist. Or, specify false to
          undo the previous archiving if any.
      due:
        type: string
        example: '2020-01-22T02:06:58.158Z'
        description: '(Optional) When this sublist was aimed to complete. '
      name:
        type: string
        example: Sublist 101
        description: (Optional) The name of the sublist.
      id:
        type: string
        example: Sublist101
        description: (Optional) ID of the sublist.
      iconColor:
        type: string
        example: '37'
        description: >-
          (Optional) The color of the icon representing this record. It is an
          index of our predefined color palette. 
      image:
        type: string
        example: icon-view-kanban
        description: >-
          (Optional) The image representing this record. It shall be one of the
          predined images:
           'icon-view-list', 'icon-view-kanban', 'icon-briefcase-o', 'icon-rocket-o', 'icon-bug-o', 'icon-leaf-o', 'icon-clapperboard', 'icon-sitemap-o', 'icon-flash-on-o', 'icon-piggy-bank-o', 'icon-graduation-cap-o', 'icon-paper-plane-o', 'icon-globe-o', 'icon-music-o', 'icon-detail', 'icon-beach-o', 'icon-paper', 'icon-home-o', 'icon-building', 'icon-database-o', 'icon-microscope-o', 'icon-hamburger-o', 'icon-trophy-o', 'icon-thumbs-o-up', 'icon-thumbs-o-down', 'icon-smile-o', 'icon-frown-o', 'icon-meh-o', 'icon-bullseye', 'icon-square-dotted-o'
  UpdateTagBody:
    type: object
    properties:
      project:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: >-
          (Optional) OID of the project this tag shall be limited to. It is used
          only if "global" is also specified and false. Otherwise, it is simply
          ignored.
      global:
        type: boolean
        example: true
        description: >-
          (Optional) Whether this tag is global. If you specify false here, you
          have to specify "project" for what project you'd like to put the tag
          to.
      color:
        type: string
        example: '35'
        description: (Optional) The color of the tag.
      name:
        type: string
        example: Later
        description: (Optional) The new name of the tag.
  UpdateTaskBody:
    type: object
    properties:
      description:
        type: string
        example: This is a **cool** task.
        description: (Optional) Change the description about this task.
      assignees:
        type: array
        description: >-
          (Optional) OID, ID emails of the users that this task is assigned to.
          If specified, it will replace any existing assignee(s). Instead of
          replacment, you can use "addAssignees" or "removeAssignees".
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      start:
        type: string
        example: '2018-12-20T00:00:00.000Z'
        description: >-
          (Optional) An optional start time. If you'd like to specify time, use
          `yyyy-mm-ddThh:mmZ`, e.g., `2020-10-30T09:30Z`.

          If you don't like to set time, use `yyyy-mm-dd`, e.g.,
          `2020-10-30`.Note: they must be in UTC time.
      due:
        type: string
        example: '2018-12-22T00:00:00.000Z'
        description: >-
          (Optional) An optional due time. If you'd like to specify time, use
          `yyyy-mm-ddThh:mmZ`, e.g., `2020-10-30T09:30Z`.

          If you don't like to set time, use `yyyy-mm-dd`, e.g.,
          `2020-10-30`.Note: they must be in UTC time.
      recurring:
        description: >-
          (Optional) The recurring information of this task. It is null if it is
          not a recurring task.
        $ref: '#/definitions/Recurring'
      peekaboo:
        type: object
        example: true
        description: >-
          (Optional) Specify true or a positive integer to peekaboo this task
          and its subtasks. Or, specify false to undo the previous peekaboo if
          any.

          If a positive integer is specified, it is the number of days to
          peekaboo a task. If true, the default number of days will be used
          (depending on 

          the project's setting).
        anyOf:
          - type: boolean
          - type: integer
      asUser:
        type: boolean
        example: true
        description: >-
          (Optional) Specify true if you'd like to make this task as updated by
          the app.

          Default: false -- the task is marked as created by the user
          authorizing the app.
      followers:
        type: array
        description: >-
          (Optional) OID, ID or emails of the users to replace the followers of
          this task. Please refer to `addFollowers()` for more details.
        items:
          type: string
        example:
          - tzufRLqCnud74dARyDSvjWDl
          - app
      addTags:
        type: array
        description: |-
          (Optional) OID or names of the tags to be added to this task.
          Note: if tag's name is specified, it is case-insensitive.
        items:
          type: string
        example:
          - X6nmx9XjEO2wKbqeB1pRT43C
      removeTags:
        type: array
        description: |-
          (Optional) OID or names of the tags to be removed from this task.
          Note: if tag's name is specified, it is case-insensitive.
        items:
          type: string
        example:
          - mPAQrYU1qt8wAYAInKRlTnvl
      addAssignees:
        type: array
        description: (Optional) OID or ID of the assignees to be added to this task.
        items:
          type: string
        example:
          - 6QMKkEPBVWETLWrXqws94ALU
      removeAssignees:
        type: array
        description: (Optional) OID or ID of the assignees to be removed from this task.
        items:
          type: string
        example:
          - Job4NSW9xK6Owcke8iKj7zyH
      addFollowers:
        type: array
        description: >-
          (Optional) OID or ID of the followers to be added to this task.If "me"
          is specified, it means the current user will follow this task.

          If the application would like to follow (i.e., receive notifications),
          it can pass "app" as one of OIDs.

          In additions, it can pass additional information in one of the
          following syntaxes.


          Syntax 1:

          "app|team" or "app|team|channel"

          where team and channel can be any value.


          Syntax 2:

          "app|/path"

          where "/path" can be any URL path. It will be appended to the hook's
          URL when calling the registered hook. For example, if the hook URL is
          "https://super.app/hooks/standard" and the follower is
          "app|/soc1/33456/a7", then the notification will be sent to
          "https://super.app/hooks/standard/soc1/33456/a7".
        items:
          type: string
        example:
          - sfsvLbDVPvi1QMf2GkDn7VSy
      removeFollowers:
        type: array
        description: >-
          (Optional) OID or ID of the followers to be removed from this
          task.Please refer to `addFollowers()` for more details.
        items:
          type: string
        example:
          - aBuz4MwfZ5CasOae6stnFa2f
      name:
        type: string
        example: New idea
        description: (Optional) New name of the task.
      tags:
        type: array
        description: >-
          (Optional) OID or names of the tags to replace existing tags of to
          this task. If specified, it will replace any existing tag(s). Instead
          of replacment, you can use "addTags" or "removeTags".

          Note: if tag's name is specified, it is case-insensitive.
        items:
          type: string
        example:
          - ITaVbkhh3iVcEcV3vuSLeE2k
      status:
        type: integer
        format: int32
        example: 100
        position: 4
        description: >-
          (Optional) An optional status to change to. Its value must be between
          0 and 100. To complete a task, specify 100.
      priority:
        type: integer
        format: int32
        example: 0
        position: 4
        description: >-
          (Optional) Change the priority of this task. Its value must be between
          -1 (lowest) and 2 (highest). 
  User:
    type: object
    properties:
      url:
        type: string
        example: 'https://quire.io/u/john'
        description: Url of this record on Quire website.
      name:
        type: string
        example: John
        description: Name.
      id:
        type: string
        example: john
        description: ID.
      nameText:
        type: string
        example: John
        description: Name but excluding markdown characters.
      nameHtml:
        type: string
        example: John
        description: Name in a form of a HTML fragment converted from markdown.
      email:
        type: string
        example: john@gmail.cc
        description: Email address.
        allowEmptyValue: true
      website:
        type: string
        example: 'https://coolwebsites.com'
        description: Website.
        allowEmptyValue: true
      description:
        type: string
        example: This is *cool*!
        description: Description.
      descriptionText:
        type: string
        example: This is cool!
        description: Description but excluding markdown characters.
      descriptionHtml:
        type: string
        example: This is <i>cool</i>!
        description: Description in a form of a HTML fragment converted from markdown.
      iconColor:
        type: string
        example: '37'
        description: >-
          The color of the icon representing this record. It is an index of our
          predefined color palette. 
      image:
        type: string
        example: 'https://quire.s3.amazonaws.com/oid/image.jpg'
        description: The image representing this record.
        allowEmptyValue: true
      oid:
        type: string
        example: Dyh2YkFcu9uLgLFIeN1kB4Ld
        description: 'OID, aka. UUID.'
